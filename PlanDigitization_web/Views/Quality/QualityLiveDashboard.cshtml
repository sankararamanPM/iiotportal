
@{
    ViewBag.Title = "QualityLiveDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<html>
<body>

    <header class="page-header">
        <h2> Quality Live Dashboard </h2>
    </header>
    @*<div style="padding-left:60%">
            <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Live Time : 2020-08-24 10:00:00 <span id="live_time"></span></button>
            <img src="~/assets/images/refresh.png" height="50" width="100" alt="Reload" style="" id="imgid" onclick="window.location.reload();" />

        </div>*@

    <header class="panel-heading">

        <p style="font-size:1.5em;">
            <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default"><span id="live_time" class="blinking"></span></button>
            <span id="prev_button" style="padding-right:5%">
                <img src="~/assets/images/prev.png" height="50" width="100" alt="Prev" id="prev" />
            </span>
            <span id="line_heading" style="padding-right:5%;   width:20%;font-size:1em;display:inline-block;align-content:center"></span>
            <span id="next_button" style="padding-right:5%">
                <img src="~/assets/images/next.png" height="50" width="100" alt="Next" id="next" />
            </span>
            <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Refresh</button>
            <img src="~/assets/images/refresh.png" height="50" width="100" alt="Reload" style="" id="imgid" onclick="window.location.reload();" />

        </p>
        @*<a id="testid">click to hover</a>
            <p id="test1"> hover text</p>*@
    </header>
    <header class="panel-heading">
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line :  <span id="line"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Shift : <span id="shift"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Department/Plant :  <span id="plant"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">First Pass yield : <span id="shift"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Last Data Update: <span id="updated_time"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Next Data Update:  <span id="next_update"></span></button>

    </header>
    <br />
   
        <div class="col-md-12">
            <div class="table-responsive" style="overflow-x:unset">
                <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-live">
                    <thead style="background-color:cadetblue;">
                        <tr>
                            <th>Stn Number</th>
                            <th>Machine Number</th>
                            <th>Operator</th>
                            <th>Machine Status</th>
                            <th>Variant</th>
                            <th>Cycle Time</th>
                            <th>Ok Parts</th>
                            <th>Scrap</th>
                            <th>Downtime(secs)</th>
                            <th>Loss Time</th>
                            <th>OEE </th>
                            <th>Availability</th>
                            <th>Performance</th>
                            <th>Quality</th>


                        </tr>
                    </thead>
                    <tbody id="details1" style="width:100%;"></tbody>


                </table>
            </div>
            <div class="table-responsive" id="variant_list" style="position:absolute;width:50%">
                <table class=" table table-bordered table-striped table-condensed mb-none">
                    <thead>
                        <tr>
                            <th>S.no</th>
                            <th>Date</th>
                            <th>Variant List</th>
                            <th>Machine No.</th>
                            <th>Produced Quantity</th>



                        </tr>
                    </thead>
                    <tbody id="details4" style="width:100%;"></tbody>


                </table>
            </div>
        </div>
        <div class="col-md-12" style="margin-top:2%;">

            <h4 style="border:solid;border-color:cadetblue;background-color:cadetblue;">
                Station wise status bars
            </h4>
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Shift </label>
            </div>
            <div class="btn-group">
                <select id="shift_select" class="form-control" name="shift_select" title="*"></select>
            </div>
            <div id="status_bar" style="width:100%">

            </div>




        </div>
        <div class="col-md-12" style="margin-top:2%;border:solid;">
            <div class="col-md-4" style="margin-left:2%;padding-top:2%">

                <div class="" id="progress_chart1" style="padding-left:10px;"></div>
                <p style="padding-left:60%">OEE</p>
                <div id="progress_avail" style="padding-left:10px"></div>
                <p style="padding-left:60%">Availablility</p>
                <div id="progress_perf" style="padding-left:10px"></div>
                <p style="padding-left:60%">Performance</p>
                <div id="progress_quality" style="padding-left:10px"></div>
                <p style="padding-left:60%">Quality</p>


            </div>
            <div class="col-md-2">
                <div>
                    <div id="planned" style="margin-left:2%;">

                    </div>
                    <div style="border:solid;background-color:teal;border-color:teal;"><h4 style="color:white;">Planned/Actual</h4></div>




                </div>
            </div>
            <div class="col-md-2">
                <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Planned Quantity:  <span id="planned_quantity"></span></button>
                <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Actual Quantity:  <span id="actual_quantity"></span></button>


            </div>

            <div class="col-md-3" style="padding-top:1%;padding-bottom:2%;  width:30%;border:solid;margin-top:1%">
                <div>
                    <div class="" style="float:left;margin-right:2%">
                        <span class="red_circle" style="margin:0px;border:0px;float:left;"></span>
                        <p style="display:inline-block">M/c stopped</p>
                    </div>
                    <div style="margin:1%">
                        <span class="green_circle" style="margin:0px;border:0px;"></span>
                        <p style="display:inline-block">M/c Running</p>
                    </div>
                </div>

                <div>
                    <div style="position:relative">
                        <span class="blue_circle" style="margin:0px;border:0px;"></span>
                        <p style="display:inline-block">M/c Running with error</p>
                    </div>
                    <div>
                        <span class="yellow_circle" style="margin:0px;border:0px;"></span>
                        <p style="display:inline-block">M/c stopped for more than 30 mns</p>
                    </div>
                </div>

                <div>
                    <img src="~/assets/images/excel.png" height="50" width="100" alt="Export" style="" />
                    <img src="~/assets/images/download.png" height="50" width="100" alt="Export" style="" />
                </div>
            </div>
        </div>
        <div>

        </div>
        <div id="myModal" class="modal">

            <!-- Modal content -->
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                    <h2>Error List</h2>
                </div>
                <div class="modal-body" id="machine_status">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Last Data Update: 2020-08-24 10:00:00 <span id="shift"></span></button>

                    <button class="btn btn-primary" onclick="showorhide()" id="show"> Show Top 10 Reason</button>

                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-errormaster">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>Error</th>
                                <th>Count</th>

                            </tr>
                        </thead>
                        <tbody id="details3" style="width:100%;"></tbody>


                    </table>
                    <div id="showorhide" style="display:none">
                        <h2>Top 10 Reasons</h2>
                        <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-errorlist">
                            <thead style="background-color:cadetblue;">
                                <tr>
                                    <th>Error Time</th>
                                    <th>Error</th>
                                   
                                    <th>Error Duration(Mins.)</th>


                                </tr>
                            </thead>
                            <tbody id="details2" style="width:100%;"></tbody>


                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div id="mymodal_cthistogram" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close" id="ctclose">&times;</span>
                    <h2>Cycle Time Histogram</h2>
                </div>
                <div class="modal-body" id="ctgraph_content">
                    <div id='container' class="ct_graph">

                    </div>

                </div>
            </div>

        </div>
        <div id="mymodal_okparts" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close" id="okpartsclose">&times;</span>
                    <h2>OK Parts Count</h2>
                </div>
                <div class="modal-body" id="okparts_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine No: <span id="ok_mcno"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="ok_variant"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="ok_pallets"></span></button>
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-okparts">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Timestamp</th>
                                <th>Count</th>
                                <th>Produced Quantity</th>

                            </tr>
                        </thead>
                        <tbody id="okparts_details" style="width:100%;"></tbody>


                    </table>
                </div>
            </div>

        </div>
        <div id="mymodal_nokparts" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close" id="nokpartsclose">&times;</span>
                    <h2>Scrap Parts Count</h2>
                </div>
                <div class="modal-body" id="okparts_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine No: <span id="nok_mcno"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-nokparts">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Timestamp</th>
                                <th>Count</th>
                                <th>Scrapped Quantity</th>

                            </tr>
                        </thead>
                        <tbody id="nokparts_details" style="width:100%;"></tbody>


                    </table>
                </div>
            </div>

        </div>
        <div id="mymodal_downtime" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close" id="downtimeclose">&times;</span>
                    @*<h2>Scrap Parts Count</h2>*@
                </div>
                <div class="modal-body" id="downtime_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Current Time: <span id="downtime_current"></span></button>
                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>*@
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-downtime">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Downtime Reason</th>
                                <th>Error Start</th>
                                <th>Error End</th>
                                <th>Error Ack. By</th>
                                <th>Error Corrected By</th>
                                <th>Duration in min</th>

                            </tr>
                        </thead>
                        <tbody id="downtime_details" style="width:100%;"></tbody>


                    </table>

                    <div id='container' class="downtime_graph">

                    </div>

                </div>
            </div>

        </div>
        <div id="mymodal_losstime" class="modal">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close" id="losstimeclose">&times;</span>
                    @*<h2>Scrap Parts Count</h2>*@
                </div>
                <div class="modal-body" id="losstime_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Current Time: <span id="losstime"></span></button>
                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>*@
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-losstime">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Downtime Reason</th>
                                <th>Error Start</th>
                                <th>Error Ack. By</th>
                                <th>Error Corrected</th>
                                <th>Error Corrected By</th>
                                <th>Duration in min</th>

                            </tr>
                        </thead>
                        <tbody id="losstime_details" style="width:100%;"></tbody>

                    </table>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total Loss Time: <span id="totallosstime"></span></button>

                    <div id='losstime_pie' class="losstime_graph" style="padding-left:30%">

                    </div>

                </div>
            </div>

        </div>
    
</body>
</html>
<script src="~/assets/javascripts/swal.js"></script>
<script src="~/assets/javascripts/swal_alert.js"></script>
<script src="~/assets/datepicker_normal/dpjquery.min.js"></script>
<script src="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<script src="~/assets/javascripts/jquery.dataTables.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<style>
    #imgid:hover {
        cursor: pointer;
    }
    #prev:hover {
        cursor: pointer;
    }
    #next:hover {
        cursor: pointer;
    }
    path.slice {
        stroke-width: 2px;
    }
    .bullet {
        font: 10px sans-serif;
    }

        .bullet .marker {
            stroke: #000;
            stroke-width: 2px;
        }

        .bullet .tick line {
            stroke: #666;
            stroke-width: .5px;
        }

        .bullet .range.s0 {
            fill: #eee;
        }

        .bullet .range.s1 {
            fill: #ddd;
        }

        .bullet .range.s2 {
            fill: #ccc;
        }

        .bullet .measure.s0 {
            fill: steelblue;
        }

        .bullet .title {
            font-size: 14px;
            font-weight: bold;
        }

        .bullet .subtitle {
            fill: #999;
        }
    .modal {
        overflow-y: auto;
    }
</style>
<script>
    var line_name=''
    var timer_upd = 10;
    function changeprev() {
       
    }
    var list = [];
    var list_code = [];
    var j = 0;
    $('body').css({
        overflow: 'visible'
    });
    var widthd = 140
    heightd = 140
    margind = 2
    var radiusd = Math.min(widthd, heightd) / 2 - margind
    var arcd = d3.arc()
        .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
        .outerRadius(radiusd * 0.8)

    // Another arc that won't be drawn. Just for labels positioning
    var outerArcd = d3.arc()
        .innerRadius(radiusd * 0.9)
        .outerRadius(radiusd * 0.9)

    $(document).ready(function () {
        timer_upd = 10;
        var vars = [], hash;
        var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        for (var i = 0; i < hashes.length; i++) {
            hash = hashes[i].split('?');
            vars.push(hash[0]);
            vars[hash[0]] = hash[1];
        }
        line_name = vars[0]
        $('#next_update').text(timer_upd + 's')
        update_timer()
        getqualitylive_table()
        var s = '<option value="">Select Shift</option>';
        for (var i = 1; i <= 3; i++) {
            s += '<option value="' + i + '">' + 'Shift'+i + '</option>';
        }
        $("#shift_select").html(s);

       

        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var myData = {
            "Flag": "LineCode",
            "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode" : '@Session["PlantCode"]',
        };
         $.ajax({
            type: "POST",
            url: URL + 'api/Toollife/GetSettingdatas',
            data: myData,
            dataType: "json",
             success: function (response) {


                 for (i = 0; i < response.data.length; i++) {
                     list.push(response.data[i].Name);
                     list_code.push(response.data[i].Code);
                 }
                 list.push("Line2");
                 list.push("Line3");
                 list_code.push('Line2')
                 list_code.push('Line3')
                 document.getElementById('line_heading').textContent = list[0];

            },
            error: function (response) {

            }
        });
        //for zero value before live update 
        var progressData = [{
            "skill": "OEE",
            "progress": 0
        }];

        //trial chart for progress bar
        update(progressData);
           

        var progressData2 = [{
            "skill": "Availability",
            "progress": 0
        }];
        
        var id1 = "#progress_avail"
        update1(progressData2);
        var progressData3 = [{
            "skill": "Performance",
            "progress": 0
        }];
        update2(progressData3);

        var progressData4 = [{
            "skill": "Quality",
            "progress": 0
        }];
        update3(progressData4);

        //bullet chart for kpi.-oee
        var bullet_text = '  [' +
            '{ "title": "OEE", "subtitle":"90%","ranges": [0,50,100], "measures": [90], "markers": [100] }]' 
        var bullet_obj = JSON.parse(bullet_text)
        //var marginb = { top: 5, right: 0, bottom: 20, left: 60 },
        var marginb = { top: 0, right: 0, bottom: 0, left: 40 },
            widthb = 400 - marginb.left - marginb.right,
            heightb = 30 - marginb.top - marginb.bottom;

        var chartb = d3.bullet()
            .width(widthb)
            .height(heightb);


       

        var svgb = d3.select("#progress_chart").selectAll("svg")
            .data(bullet_obj)
                .enter().append("svg")
                .attr("class", "bullet")
                .attr("width", widthb + marginb.left + marginb.right)
                .attr("height", heightb + marginb.top + marginb.bottom+10)
                .append("g")
                .attr("transform", "translate(" + marginb.left + "," + marginb.top + ")")
            .call(chartb);
            

            var title = svgb.append("g")
                .style("text-anchor", "end")
                .attr("transform", "translate(-6," + heightb / 2 + ")");

            title.append("text")
                .attr("class", "title")
               
                .text(function (d) { return d.title; });

            title.append("text")
                .attr("class", "subtitle")
                .attr("dy", "1em")
            .attr("dx", widthb / 2)
            .text(function (d) { return d.subtitle; });
        //this will change chart content
        setInterval(function () {
          
            svgb.data(bullet_obj).call(chartb.duration(1000));   
        }, 5000);
              //bullet chart for availability
        
        var bullet_text_a = '  [' +
            '{ "title": "Availablity", "subtitle":"20%","ranges": [0,50,100], "measures": [20], "markers": [100] }]'
        var bullet_obj1 = JSON.parse(bullet_text_a)
        var marginb1 = { top: 5, right: 0, bottom: 20, left: 100 },
            widthb1 = 400 - marginb1.left - marginb1.right,
            heightb1 = 50 - marginb1.top - marginb1.bottom;


        createdonut()
        //timeline chart
       
        
        var testData= '[{ "times" : [' +
            '{"starting_time":'+ new Date("09/12/2020 06:00:00").getTime()+', "ending_time": '+new Date("09/12/2020 06:30:00").getTime()+',"color":"green"},' +
            '{"starting_time":' + new Date("09/12/2020 06:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 08:30:00").getTime() +' ,"color":"#e1ad01"},' +
            '{"starting_time": ' + new Date("09/12/2020 10:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 11:30:00").getTime() +'  ,"color":"#b7410e"},' +
            '{"starting_time": ' + new Date("09/12/2020 08:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 10:30:00").getTime() + '  ,"color":"green"},' +

            '{  "starting_time":'+ new Date("09/12/2020 11:30:00").getTime()+', "ending_time": '+new Date("09/12/2020 12:30:00").getTime()+' } ]}]';
        var obj1 = JSON.parse(testData)
        console.log("testdata" + JSON.stringify(obj1))
      
       
        var testData1 = [
            { times: [{ "starting_time": new Date("09/12/2020 06:00:00").getTime(), "ending_time": new Date("09/12/2020 06:30:00").getTime(),"color":"pink" }, { "starting_time": new Date("09/12/2020 06:30:00").getTime(), "ending_time": new Date("09/12/2020 08:30:00").getTime() }, { "starting_time": new Date("09/12/2020 11:30:00").getTime(), "ending_time": new Date("09/12/2020 12:30:00").getTime() }] },
            { times: [{ "starting_time": new Date("09/12/2020 08:30:00").getTime(), "ending_time": new Date("09/12/2020 10:30:00").getTime() },] },
            { times: [{ "starting_time": new Date("09/12/2020 10:30:00").getTime(), "ending_time": new Date("09/12/2020 11:30:00").getTime() }] }]
        
        console.log("testdata1" + JSON.stringify(testData1))
      
        


        //calling timeline chart
      
        var width_t=500
             var chart_t = d3.timeline();
        d3.select("#status_bar").append("svg").attr("width", width_t)
            .datum(obj1).call(chart_t);

        
    })
    function createdonut() {
        //donut chart
        //var widthd = 140
        //heightd = 140
        //margind = 2
        //var radiusd = Math.min(widthd, heightd) / 2 - margind
        d3.selectAll("#planned > *").remove();
        // append the svg object to the div called 'availabilitychart'
        var svgd = d3.select("#planned")
            .append("svg")
            .attr("width", widthd)
            .attr("height", heightd)
            .append("g")
            .attr("transform", "translate(" + widthd / 2 + "," + heightd / 2 + ")");

        // Create dummy data
        //var data = { a: response.data[i].Availability, b: 100 - response.data[i].Availability }
        var datad = { a: 0, b: 100 }
        // set the color scale
        var colord = d3.scaleOrdinal()
            .domain(["a", "b"])
            .range(["#007F00", "white"]);

        // Compute the position of each group on the pie:
        var pied = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) { return d.value; })
        var data_readyd = pied(d3.entries(datad))

        // The arc generator
        //var arcd = d3.arc()
        //    .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
        //    .outerRadius(radiusd * 0.8)

        //// Another arc that won't be drawn. Just for labels positioning
        //var outerArcd = d3.arc()
        //    .innerRadius(radiusd * 0.9)
        //    .outerRadius(radiusd * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svgd
            .selectAll('allSlices')
            .data(data_readyd)
            .enter()
            .append('path')
            .attr('d', arcd)
            .attr('fill', function (d) { return (colord(d.data.key)) })

        svgd.append("text")
            .attr("text-anchor", "middle")
            .attr('font-size', '4em')
            .attr('y', 5)
            //.text(response.data[i].Availability + "%");
            .text(0 + "%");




    }
    function drawpie(percentage) {
        //donut chart
        var widthd = 140
        heightd = 140
        margind = 2
        var radiusd = Math.min(widthd, heightd) / 2 - margind
        d3.selectAll("#planned > *").remove();

        var svgd = d3.select("#planned")
            .append("svg")
            .attr("width", widthd)
            .attr("height", heightd)
            .append("g")
            .attr("transform", "translate(" + widthd / 2 + "," + heightd / 2 + ")");


        var datad = { a: percentage, b: 100 - percentage }

        var colord = d3.scaleOrdinal()
            .domain(["a", "b"])
            .range(["#007F00", "white"]);


        var pied = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) { return d.value; })
        var data_readyd = pied(d3.entries(datad))

        // The arc generator
        var arcd = d3.arc()
            .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
            .outerRadius(radiusd * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArcd = d3.arc()
            .innerRadius(radiusd * 0.9)
            .outerRadius(radiusd * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svgd
            .selectAll('allSlices')
            .data(data_readyd)
            .enter()
            .append('path')
            .attr('d', arcd)
            .attr('fill', function (d) { return (colord(d.data.key)) })

        svgd.append("text")
            .attr("text-anchor", "middle")
            .attr('font-size', '4em')
            .attr('y', 5)
            //.text(response.data[i].Availability + "%");
            .text(percentage + "%");
    }
    function nextItem() {
        j = j + 1; // increase i by one
        j = j % list.length; // if we've gone too high, start from `0` again
        line_name = list_code[j];
        getdataonclick()
        return list[j]; // give us back the item of where we are now
    }
    function prevItem() {
        if (j === 0) { // i would become 0
            j = list.length; // so put it at the other end of the array
        }
        j = j - 1; // decrease by one
        line_name = list_code[j];
        getdataonclick()
        return list[j]; // give us back the item of where we are now
    }

    document.getElementById('prev_button').addEventListener(
        'click', // we want to listen for a click
        function (e) { // the e here is the event itself
            document.getElementById('line_heading').textContent = prevItem();
        }
    );

    document.getElementById('next_button').addEventListener(
        'click', // we want to listen for a click
        function (e) { // the e here is the event itself
            document.getElementById('line_heading').textContent = nextItem();
        }
    );
</script>
<script>
    function mc_status(machine, shift) {
        var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        modal.style.display = "block";
        $("#myModal").modal('show');
        $('body').css({
            overflow: 'hidden'
        });      
      
         var alarm_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Status'
        };
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetTop_Breakup',
            data: alarm_Data,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {

              

                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                   
                    cols += "<td> " + response.data.Table[i].Error_Name + "</td> ";
                    cols += "<td> " + response.data.Table[i].Frequency + "</td> ";
                   
                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#details3").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-errormaster')) {
                    $('#datatable-errormaster').DataTable().destroy();
                }
               
                $('#datatable-errormaster').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#datatable-errormaster").empty()
            }
        }).error(function (response) {

            });

        //error breakup flag-top
        var alarm_Data1 = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Top'
        };
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetTop_Breakup',
            data: alarm_Data1,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {

              

                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + response.data.Table[i].Error_Time + "</td> ";
                    cols += "<td> " + response.data.Table[i].Error_Name + "</td> ";
                    cols += "<td> " + response.data.Table[i].Error_Duration + "</td> ";
                   
                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#details2").append(newRow);


                }
                if ($.fn.DataTable.isDataTable('#datatable-errorlist')) {
                    $('#datatable-errorlist').DataTable().destroy();
                }
                $('#datatable-errorlist').DataTable({
                    "responsive": true,
                    "autoWidth": false,



                });
                
                
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#datatable-errorlist").empty()
            }
        }).error(function (response) {

            });

        //for (var i = 0; i < 3; i++) {
        //    var newRow = $("<tr>");
        //    var cols = '';
        //    //var cols = $("<tr>");
        //    cols += "<td> " + '08.00' + "</td> ";
        //    cols += "<td> " + 'TE' + i + "</td> ";
        //    cols += "<td> " + '1123' + "</td> ";
        //    cols += "<td> " + '10.50' + "</td> ";


        //    cols += "</tr>"
        //    //cols += "</tr>";
        //    newRow.append(cols);
        //    $("#details2").append(newRow);


        //}
       

    }
    //$('#ct').on('click', function () {
    //    alert(data1)
    //    document.getElementById("mymodal_cthistogram").style.display = "block";
    //    $("#mymodal_cthistogram").modal('show');
    //    $('body').css({
    //        overflow: 'hidden'
    //    });
    //});
   
    function mc_status1(machine, shift) {
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_cthistogram").style.display = "block";
        $("#mymodal_cthistogram").modal('show');
        $('body').css({
            overflow: 'hidden'
        });
        var ct_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
            "ShiftID": shift,
            "Machine_Code": machine
         };
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetCtHistogram',
            data: ct_Data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                //$('.ct_graph').html('')
                console.log('ct data' + JSON.stringify(response.data.Table))
                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                var text = '{ "Table" : [' +
                    '{ "date": "18-08-2020","FirstPassyeild": 100.0 },' +
                    '{ "date": "22-08-2020","FirstPassyeild": 100.0 },' +
                    '{ "date": "23-08-2020","FirstPassyeild": 100.0 } ]}';
               
              //  var obj = JSON.parse(response.data)
                //sample = obj.Table;
                sample = response.data.Table
                d3.selectAll(".ct_graph > *").remove();
                //const svg = d3.select('.year_report').append('svg');
                const svg = d3.select(".ct_graph").append("svg");
                // const svg = d3.select('svg');
                

                const svgContainer = d3.select('#container');

                const margin = 80;
                const width = 1000 - 2 * margin;
                const height = 600 - 2 * margin;

                const chart = svg.append('g')
                    .attr('transform', `translate(${margin}, ${margin})`);

                const xScale = d3.scaleBand()
                    .range([0, width])
                    .domain(sample.map((s) => s.cycletime))
                    .padding(0.4)

                const yScale = d3.scaleLinear()
                    .range([height, 0])
                    .domain([0, d3.max(sample, function (d) { return d.Occurence; })]);

                const makeYLines = () => d3.axisLeft()
                    .scale(yScale)

                chart.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));

                chart.append('g')
                    .call(d3.axisLeft(yScale));

                chart.append('g')
                    .attr('class', 'grid')
                    .call(makeYLines()
                        .tickSize(-width, 0, 0)
                        .tickFormat('')
                    )

                const barGroups = chart.selectAll()
                    .data(sample)
                    .enter()
                    .append('g')



               

                barGroups
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', (g) => xScale(g.cycletime))
                    .attr('y', (g) => yScale(g.Occurence))
                    .attr('height', (g) => height - yScale(g.Occurence))
                    .attr('width', xScale.bandwidth())

                    .on('mouseleave', function () {
                        d3.selectAll('.value')
                            .attr('opacity', 1)

                        d3.select(this)
                            .transition()
                            .duration(300)
                            .attr('opacity', 1)
                            .attr('x', (a) => xScale(a.cycletime))
                            .attr('width', xScale.bandwidth())

                        chart.selectAll('#limit').remove()
                        chart.selectAll('.divergence').remove()
                    })

                barGroups
                    .append('text')
                    .attr('class', 'value')
                    .attr('x', (a) => xScale(a.cycletime) + xScale.bandwidth() / 2)
                    .attr('y', (a) => yScale(a.Occurence) + -10)
                    .attr('text-anchor', 'middle')
                    .text((a) => `${a.Occurence}`)

                svg.append('text')
                    .attr('class', 'label')
                    .attr('x', -(height / 2) - margin)
                    .attr('y', margin / 2.4)
                    .attr('transform', 'rotate(-90)')
                    .attr('text-anchor', 'middle')
                    .text('Occurence')

                svg.append('text')
                    .attr('class', 'label')
                    .attr('x', width / 2 + margin)
                    .attr('y', height + margin * 1.7)
                    .attr('text-anchor', 'middle')
                    .text('CycleTime')


            }
            else {
                //$(".custom_pre_error").text(response.msg);
               
            }
        }).error(function (response) {

        });
        
    }
    function okparts_show(machine, shift, variant) {

          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_okparts").style.display = "block";
        $("#mymodal_okparts").modal('show');
        $('body').css({
            overflow: 'hidden'
        });
         var okparts_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Okparts'
        };
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetPartsdetails',
            data: okparts_Data,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {

                $('#ok_mcno').text(machine)
                $('#ok_variant').text(variant)

                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].time_stamp + "</td> ";
                    cols += "<td> " + response.data.Table[i].count + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Produced Qty"]+"</td> ";
                    
                   


                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#okparts_details").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-okparts')) {
                    $('#datatable-okparts').DataTable().destroy();
                }
               
                $('#datatable-okparts').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#okparts_details").empty()
            }
        }).error(function (response) {

            });
        
    }
    function nokparts_show(machine, shift, variant) {
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_nokparts").style.display = "block";
        $("#mymodal_nokparts").modal('show');
        $('body').css({
            overflow: 'hidden'
        });
         var nokparts_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Scrap'
        };
       
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetPartsdetails',
            data: nokparts_Data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
                $('#nok_mcno').text(machine)
                $('#nok_variant').text(variant)

                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    
                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].time_stamp + "</td> ";
                    cols += "<td> " + response.data.Table[i].count + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Produced Qty"]+"</td> ";
                    
                   


                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#nokparts_details").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-nokparts')) {
                    $('#datatable-nokparts').DataTable().destroy();
                }
               
                $('#datatable-nokparts').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#nokparts_details").empty()
            }
        }).error(function (response) {

            });
    }
    function downtime_show(machine,shift,variant) {
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_downtime").style.display = "block";
        $("#mymodal_downtime").modal('show');
        $('body').css({
            overflow: 'hidden'
        });
         var downtime_data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Downtime'
        };
       
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetLossdetails',
            data: downtime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
                $('#nok_mcno').text(machine)
               
                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    
                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].DownTime_Reason + "</td> ";
                    cols += "<td> " + response.data.Table[i].Start_Time + "</td> ";
                    cols += "<td> Supervisor</td> ";
                    cols += "<td> " + response.data.Table[i].End_time + "</td> ";
                    cols += "<td> Supervisor</td> ";
                    cols += "<td> " + response.data.Table[i]["Duration_In_Sec"]+"</td> ";
                    
                   


                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#downtime_details").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-downtime')) {
                    $('#datatable-downtime').DataTable().destroy();
                }
               
                $('#datatable-downtime').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#downtime_details").empty()
            }

           

        }).error(function (response) {

            });


        //new one appended

        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/downtimegraph_details',
            data: downtime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {

                const margin = 80;
                const width = 1000 - 2 * margin;
                const height = 600 - 2 * margin;


                var text1 = '{ "Table" : [' +
                    '{ "Error": "Breakdown","Duration": 100.0 },' +
                    '{ "Error": "Breakdonw1","Duration": 100.0 },' +
                    '{ "Error": "Breakdown2","Duration": 100.0  } ]}';

                var obj1 = response.data
                console.log("graph" + JSON.stringify(response.data))
                sample1 = obj1.Table;
                d3.selectAll(".downtime_graph > *").remove();
                const svg1 = d3.select(".downtime_graph").append("svg");

                const chart1 = svg1.append('g')
                    .attr('transform', `translate(${margin}, ${margin})`);

                const xScale1 = d3.scaleBand()
                    .range([0, width])
                    .domain(obj1.map((s) => s.DownTime_Reason))
                    .padding(0.4)

                const yScale1 = d3.scaleLinear()
                    .range([height, 0])
                    .domain([0, d3.max(obj1, function (d) { return d.Duration_In_Sec; })]);

                const makeYLines1 = () => d3.axisLeft()
                    .scale(yScale1)

                chart1.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale1));

                chart1.append('g')
                    .call(d3.axisLeft(yScale1));

                chart1.append('g')
                    .attr('class', 'grid')
                    .call(makeYLines1()
                        .tickSize(-width, 0, 0)
                        .tickFormat('')
                    )

                const barGroups1 = chart1.selectAll()
                    .data(obj1)
                    .enter()
                    .append('g')

                barGroups1
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', (g) => xScale1(g.DownTime_Reason))
                    .attr('y', (g) => yScale1(g.Duration_In_Sec))
                    .attr('height', (g) => height - yScale1(g.Duration_In_Sec))
                    .attr('width', xScale1.bandwidth())



                barGroups1
                    .append('text')
                    .attr('class', 'value')
                    .attr('x', (a) => xScale1(a.DownTime_Reason) + xScale1.bandwidth() / 2)
                    .attr('y', (a) => yScale1(a.Duration_In_Sec) + -10)
                    .attr('text-anchor', 'middle')
                    .text((a) => `${a.Duration_In_Sec} mins`)

                svg1.append('text')
                    .attr('class', 'label')
                    .attr('x', -(height / 2) - margin)
                    .attr('y', margin / 2.4)
                    .attr('transform', 'rotate(-90)')
                    .attr('text-anchor', 'middle')
                    .text('Duration in Mins')

                svg1.append('text')
                    .attr('class', 'label')
                    .attr('x', width / 2 + margin)
                    .attr('y', height + margin * 1.7)
                    .attr('text-anchor', 'middle')
                    .text('Error')
            }
        }).error(function (response) {

        });

        
    }
    function losstime_show(machine, shift, variant) {
          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_losstime").style.display = "block";
        $("#mymodal_losstime").modal('show');
        $('body').css({
            overflow: 'hidden'
        });
        var losstime_data = {
            "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode": '@Session["PlantCode"]',
            //"Linecode": vars[0],
            "Linecode": line_name,
            "ShiftID": shift,
            "Machine_Code": machine,
            "Flag": 'LoseTime'
        };
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetLossdetails',
            data: losstime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
               
                $('#nok_mcno').text(machine)

                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                    var num = i + 1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");

                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].DownTime_Reason + "</td> ";
                    cols += "<td> " + response.data.Table[i].Start_Time + "</td> ";
                    cols += "<td> Supervisor</td> ";
                    cols += "<td> " + response.data.Table[i].End_time + "</td> ";
                    cols += "<td> Supervisor</td> ";
                    cols += "<td> " + response.data.Table[i]["Duration_In_Sec"] + "</td> ";




                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#losstime_details").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-losstime')) {
                    $('#datatable-losstime').DataTable().destroy();
                }

                $('#datatable-losstime').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });

            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#losstime_details").empty()
            }

            });


        //pie chart to show percentage
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/losetimegraph_details',
            data: losstime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                $('#totallosstime').text(response.data[0].End_time + " mins")
                console.log(response)
                d3.selectAll("#losstime_pie > *").remove();
                var svg_pie = d3.select("#losstime_pie").append("svg").attr("width", 700).attr("height", 300);


                var piechart_Data = response.data;
                svg_pie.append("g").attr("id", "Donut");
                Donut3D.draw("Donut", getData(), 200, 150, 130, 100, 30, 0, svg_pie);



                function getData() {
                    var color = d3.scaleOrdinal(['#4daf4a', '#377eb8', '#ff7f00', '#984ea3', '#e41a1c']);
                    return piechart_Data.map(function (d) {
                        console.log(d)

                        return { label: d.DownTime_Reason, value: d.Start_Time, color: color(d.Start_Time) };
                    });
                }
              
            }


            else {
                //$(".custom_pre_error").text(response.msg);
               
            }

        });
            }
</script>
<style>
    #datatable-live {
        table-layout: fixed !important;
        width: 100%;
    }

    table {
        table-layout: fixed !important;
        width: 100%;
    }

    #datatable-live td {
        width: inherit !important;
        text-overflow: ellipsis;
    }

    #datatable-live tbody {
        width: inherit !important;
        text-overflow: ellipsis;
    }

    .circle {
        background-color: red;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }
    .circle_g {
        background-color: green;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }
    .circle_b {
        background-color: blue;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }
    .circle_grey {
        background-color: grey;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }
    .circle_y {
        background-color: yellow;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }
    .red_circle {
        background-color: red;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }
    .green_circle {
        background-color: green;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }
    .blue_circle {
        background-color: blue;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }
    .grey_circle {
        background-color: grey;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }
    .yellow_circle {
        background-color: yellow;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }
    #variant_list {
        display: none;
        float: right;
    }

    #myModal {
        overflow-y: scroll;
    }
    #mymodal_cthistogram {
        overflow-y: scroll;
    }
    #mymodal_okparts {
        overflow-y: scroll;
    }
    #mymodal_nokparts {
        overflow-y: scroll;
    }
    #mymodal_downtime {
        overflow-y: scroll;
    }
    #mymodal_losstime {
        overflow-y: scroll;
    }
    .modal {
        overflow: auto !important;
    }
</style>
<script>
    function callhover() {
        alert("hovering")
    }
</script>
<script type="text/javascript">
    var ct_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
        "Linecode": line_name,
        "ShiftID": '',
        "Machine_Code":''
    };
    console.log("new ct data" + ct_Data.CompanyCode)
    var modal = document.getElementById("myModal");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        $('#myModal').css('overflow-y', 'auto')
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal1 = document.getElementById("mymodal_cthistogram");
    // Get the <span> element that closes the modal
    var span1 = document.getElementById("ctclose")
    // When the user clicks on <span> (x), close the modal
    span1.onclick = function () {
        modal1.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal2 = document.getElementById("mymodal_okparts");
    // Get the <span> element that closes the modal
    var span2 = document.getElementById("okpartsclose")
    // When the user clicks on <span> (x), close the modal
    span2.onclick = function () {
        modal2.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal3 = document.getElementById("mymodal_nokparts");
    // Get the <span> element that closes the modal
    var span3 = document.getElementById("nokpartsclose")
    // When the user clicks on <span> (x), close the modal
    span3.onclick = function () {
        modal3.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }

    var modal4 = document.getElementById("mymodal_downtime");
    var span4 = document.getElementById("downtimeclose")

    span4.onclick = function () {
        modal4.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal5 = document.getElementById("mymodal_losstime");
    var span5 = document.getElementById("losstimeclose")

    span5.onclick = function () {

        modal5.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }

    //var modal6 = document.getElementById("dummy");
    //var span6 = document.getElementById("dummyclose")

    //span6.onclick = function () {

    //    modal6.style.display = "none";
    //    modal.style.display = "none";

    //}

    //get live data for table
    function update_timer() {
        
        $('#next_update').text(timer_upd + 's')
        if (timer_upd != 0) {
            timer_upd = timer_upd - 1
        }
        else {
            timer_upd = 10
        }
        setTimeout(update_timer, 1000);
    }
    function getqualitylive_table() {
      console.log('called')
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('?');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
        }
       
         //$('#updated_time').text('');
        var variant_target = '';
        var shift_target = '';
        var actual = 0;
             var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
                 "Linecode": line_name
        };
        
        console.log(myData)
          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
            $.ajax({
                type: 'POST',
                url: live_URL + 'api/Quality/GetQualitylivedata',
                data: myData,
                dataType: 'json'
            }).success(function (response) {
                if (response.data.length != 0) {
                    //var bodyRef = document.getElementById('datatable-live').getElementsByTagName('tbody')[0];
                    //bodyRef.innerHTML = '';
                    //document.getElementById('details1').innerHTML=''
                    var elmtTable = document.getElementById('datatable-live');
                    var tableRows = elmtTable.getElementsByTagName('tbody')[0].getElementsByTagName('tr');
                    var rowCount = tableRows.length;

                    for (var x = rowCount - 1; x > 0; x--) {
                        elmtTable.removeChild(tableRows[x]);
                    }
                    //console.log("innerhtml" + document.getElementById('details1').innerHTML)
                    console.log("innerhtml" + document.getElementById('details1').innerText)
                    variant_target = response.data.Table[0].Variant_Code;
                    shift_target = response.data.Table[0].ShiftID
                    $('#line').text(vars[0])
                    $('#live_time').text('Live Time :' + new Date().toLocaleString());
                    $('#shift').text(response.data.Table[0].ShiftID)
                    $('#plant').text(response.data.Table[0].PlantCode)
                    $('#updated_time').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                    //  $('#updated_time').text(response.data.Table[0].time_stamp);
                    for (var i = 0; i < response.data.Table.length; i++) {

                        console.log('last update' + response.data.Table[i].time_stamp)
                        var newRow = $("<tr>");
                        var cols = '';
                        var sc = '';
                        var num = i + 1;
                        //var cols = $("<tr>");
                        cols += "<td> " + num + "</td> ";
                        cols += "<td> " + response.data.Table[i].AssetID + "</td> ";
                        cols += "<td> " + response.data.Table[i].OperatorID + "</td> ";
                        console.log(response.data.Table[i].Machine_Status)
                        if (response.data.Table[i].Machine_Status == "0" || response.data.Table[i].Machine_Status == "2") {

                            sc = 'circle'
                        }
                        if (response.data.Table[i].Machine_Status == "1") {
                            sc = 'circle_g'
                        }
                        if (response.data.Table[i].Machine_Status == "3") {
                            sc = 'circle_y'
                        }
                        if (response.data.Table[i].Machine_Status == "5") {
                            sc = 'circle_b'
                        }
                        if (response.data.Table[i].Machine_Status == "4") {
                            sc = 'circle_grey'
                        }
                        cols += "<td style='cursor:pointer' onclick=mc_status('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "');><span  class=" + sc + " ></span></td>";


                        cols += "<td id='var_list' > " + response.data.Table[i].Variant_Code + "</td> ";
                        cols += "<td style='cursor:pointer' onclick=mc_status1('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "'); > " + response.data.Table[i].CycleTime + "</td> ";
                        cols += "<td style='cursor:pointer' onclick=okparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].OkParts + "</td> ";
                        cols += "<td style='cursor:pointer' onclick=nokparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].Scrap + "</td> ";
                        cols += "<td style='cursor:pointer' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td> ";
                        cols += "<td style='cursor:pointer' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> ";
                        cols += "<td> " + response.data.Table[i].OEE + "</td> ";
                        cols += "<td> " + response.data.Table[i].Availability + "</td> ";
                        cols += "<td> " + response.data.Table[i].Performance + "</td> ";
                        cols += "<td> " + response.data.Table[i].Quality + "</td> ";


                        cols += "</tr>"
                        //cols += "</tr>";
                        newRow.append(cols);
                        //$("#details1").append('');
                        $("#details1").append(newRow);


                    }

                    if ($.fn.DataTable.isDataTable('#datatable-live')) {
                        $('#datatable-live').DataTable().destroy();
                    }
                    $('#datatable-live').DataTable({

                        "responsive": true,
                        "autoWidth": false,



                    });
                    timer_upd = 10;


                    //for progress chart
                    var oee_d = 0;
                    var perf_d = 0;
                    var availability_d = 0;
                    var quality_d = 0

                    for (var i = 0; i < response.data.Table.length; i++) {
                        var numb_array = [];
                        var mc_high_no = response.data.Table[i].AssetID.match(/(\d+)/)
                        numb_array.push(parseInt(mc_high_no));
                        console.log(numb_array)
                    }

                    var max = numb_array.reduce(function (a, b) {
                        return Math.max(a, b);
                    });
                    var max_station = 'M' + max;
                    for (var i = 0; i < response.data.Table.length; i++) {
                        if (response.data.Table[i].AssetID == max_station) {
                            oee_d = response.data.Table[i].OEE
                            perf_d = response.data.Table[i].Performance
                            availability_d = response.data.Table[i].Availability
                            quality_d = response.data.Table[i].Quality
                            actual = response.data.Table[i].OkParts
                        }
                    }
                    console.log(oee_d)
                    console.log(availability_d)
                    console.log(perf_d)
                    console.log(quality_d)
                    var id = "#progress_chart1"
                    // var dId = d3.select("#progress_chart1");
                    var progressData = [{
                        "skill": "OEE",
                        "progress": oee_d
                    }];
                    var progressData_avail = [{
                        "skill": "OEE",
                        "progress": availability_d
                    }];
                    var progressData_per = [{
                        "skill": "OEE",
                        "progress": perf_d
                    }];
                    var progressData_quality = [{
                        "skill": "OEE",
                        "progress": quality_d
                    }];
                    //trial chart for progress bar
                    update(progressData);
                    update1(progressData_avail);
                    update2(progressData_per);
                    update3(progressData_quality);



                    //actual and target 
                    var data_target = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                        "ShiftID": shift_target,
                        "Variant": variant_target
                    };
                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Gettarget_count',
                        data: data_target,
                        dataType: 'json'
                    }).success(function (response) {
                        console.log("target" + response.data)
                        $('#planned_quantity').text(response.data)
                        $('#actual_quantity').text(actual)
                        var percentage_target = parseInt((actual / response.data) * 100)
                        createdonut()
                        drawpie(percentage_target)


                        }).error(function (response) {

                        });
                }
               

                else {
                    //$(".custom_pre_error").text(response.msg);
                    $("#details1").empty()
                }
            }).error(function (response) {

            });
         setTimeout(getqualitylive_table, 10000);
    }

    function getdataonclick() {
        $("#details1").empty()
        console.log('called')
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('?');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
        }
       
         //$('#updated_time').text('');

             var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
                 "Linecode": line_name
         };
        console.log(myData)
          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
            $.ajax({
                type: 'POST',
                url: live_URL + 'api/Quality/GetQualitylivedata',
                data: myData,
                dataType: 'json'
            }).success(function (response) {
                if (response.data.length != 0) {
                   
                    $('#line').text(vars[0])
                    $('#live_time').text('Live Time :'+new Date().toLocaleString());
                    $('#shift').text(response.data.Table[0].ShiftID)
                    $('#plant').text(response.data.Table[0].PlantCode)
                    $('#updated_time').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                  //  $('#updated_time').text(response.data.Table[0].time_stamp);
                    for (var i = 0; i < response.data.Table.length; i++) {

                        console.log('last update' + response.data.Table[i].time_stamp)
                    var newRow = $("<tr>");
                    var cols = '';
                    //var cols = $("<tr>");
                        cols += "<td> " + i + "</td> ";
                        cols += "<td> " + response.data.Table[i].Machine_Code+ "</td> ";
                    cols += "<td> " + 'ABCd' + "</td> ";
                    cols += "<td style='cursor:pointer' onclick=mc_status();><span  class='circle'></span></td>";
                    cols += "<td id='var_list' > " + '512' + "</td> ";
                    cols += "<td style='cursor:pointer' > " + '12' + "</td> ";
                    cols += "<td style='cursor:pointer' onclick=okparts_show();> " + response.data.Table[i].OkParts + "</td> ";
                    cols += "<td style='cursor:pointer' onclick=nokparts_show();> " + response.data.Table[i].Scrap + "</td> ";
                    cols += "<td style='cursor:pointer' onclick=downtime_show();> " + response.data.Table[i].DownTime+ "</td> ";
                    cols += "<td style='cursor:pointer' onclick=losstime_show();> " + response.data.Table[i].LossTime + "</td> ";
                    cols += "<td> " + response.data.Table[i].OEE + "</td> ";
                    cols += "<td> " + response.data.Table[i].Availability + "</td> ";
                    cols += "<td> " + response.data.Table[i].Performance + "</td> ";
                    cols += "<td> " + response.data.Table[i].Quality + "</td> ";


                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#details1").append(newRow);


                    }

                    if ($.fn.DataTable.isDataTable('#datatable-live')) {
                        $('#datatable-live').DataTable().destroy();
                    }
                $('#datatable-live').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                    });
                    timer_upd = 10;
                }
                

                else {
                    //$(".custom_pre_error").text(response.msg);
                    $("#details1").empty()
                }
            }).error(function (response) {

            });
         
    }
</script>
<script>
    function showorhide() {
        var x = document.getElementById("showorhide");
        if (x.style.display === "none") {
            x.style.display = "block";
           
        } else {
            x.style.display = "none";
        }
    }

  
</script>
<script>
    //for 3d pie chart

    !function () {
        var Donut3D = {};

        function pieTop(d, rx, ry, ir) {
            if (d.endAngle - d.startAngle == 0) return "M 0 0";
            var sx = rx * Math.cos(d.startAngle),
                sy = ry * Math.sin(d.startAngle),
                ex = rx * Math.cos(d.endAngle),
                ey = ry * Math.sin(d.endAngle);

            var ret = [];
            ret.push("M", sx, sy, "A", rx, ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0), "1", ex, ey, "L", ir * ex, ir * ey);
            ret.push("A", ir * rx, ir * ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0), "0", ir * sx, ir * sy, "z");
            return ret.join(" ");
        }

        function pieOuter(d, rx, ry, h) {
            var startAngle = (d.startAngle > Math.PI ? Math.PI : d.startAngle);
            var endAngle = (d.endAngle > Math.PI ? Math.PI : d.endAngle);

            var sx = rx * Math.cos(startAngle),
                sy = ry * Math.sin(startAngle),
                ex = rx * Math.cos(endAngle),
                ey = ry * Math.sin(endAngle);

            var ret = [];
            ret.push("M", sx, h + sy, "A", rx, ry, "0 0 1", ex, h + ey, "L", ex, ey, "A", rx, ry, "0 0 0", sx, sy, "z");
            return ret.join(" ");
        }

        function pieInner(d, rx, ry, h, ir) {
            var startAngle = (d.startAngle < Math.PI ? Math.PI : d.startAngle);
            var endAngle = (d.endAngle < Math.PI ? Math.PI : d.endAngle);

            var sx = ir * rx * Math.cos(startAngle),
                sy = ir * ry * Math.sin(startAngle),
                ex = ir * rx * Math.cos(endAngle),
                ey = ir * ry * Math.sin(endAngle);

            var ret = [];
            ret.push("M", sx, sy, "A", ir * rx, ir * ry, "0 0 1", ex, ey, "L", ex, h + ey, "A", ir * rx, ir * ry, "0 0 0", sx, h + sy, "z");
            return ret.join(" ");
        }

        function getPercent(d) {
            return (d.endAngle - d.startAngle > 0.2 ?
                Math.round(1000 * (d.endAngle - d.startAngle) / (Math.PI * 2)) / 10 + '%' : '');
        }

        Donut3D.transition = function (id, data, rx, ry, h, ir) {
            function arcTweenInner(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieInner(i(t), rx + 0.5, ry + 0.5, h, ir); };
            }
            function arcTweenTop(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieTop(i(t), rx, ry, ir); };
            }
            function arcTweenOuter(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieOuter(i(t), rx - .5, ry - .5, h); };
            }
            function textTweenX(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return 0.6 * rx * Math.cos(0.5 * (i(t).startAngle + i(t).endAngle)); };
            }
            function textTweenY(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return 0.6 * rx * Math.sin(0.5 * (i(t).startAngle + i(t).endAngle)); };
            }

            var _data = d3.pie().sort(null).value(function (d) { return d.value; })(data);

            d3.select("#" + id).selectAll(".innerSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenInner);

            d3.select("#" + id).selectAll(".topSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenTop);

            d3.select("#" + id).selectAll(".outerSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenOuter);

            d3.select("#" + id).selectAll(".percent").data(_data).transition().duration(750)
                .attrTween("x", textTweenX).attrTween("y", textTweenY).text(getPercent);
        }

        Donut3D.draw = function (id, data, x /*center x*/, y/*center y*/,
            rx/*radius x*/, ry/*radius y*/, h/*height*/, ir/*inner radius*/, svg_pie) {

            var _data = d3.pie().sort(null).value(function (d) { return d.value; })(data);

            var slices = d3.select("#" + id).append("g").attr("transform", "translate(" + x + "," + y + ")")
                .attr("class", "slices");

            slices.selectAll(".innerSlice").data(_data).enter().append("path").attr("class", "innerSlice")
                .style("fill", function (d) { return d3.hsl(d.data.color).darker(0.7); })
                .attr("d", function (d) { return pieInner(d, rx + 0.5, ry + 0.5, h, ir); })
                .each(function (d) { this._current = d; });


            slices.selectAll(".topSlice").data(_data).enter().append("path").attr("class", "topSlice")
                .style("fill", function (d) { return d.data.color; })

                .style("stroke", function (d) { return d.data.color; })
                .attr("d", function (d) { return pieTop(d, rx, ry, ir); })
                .each(function (d) { this._current = d; });

            slices.selectAll(".outerSlice").data(_data).enter().append("path").attr("class", "outerSlice")
                .style("fill", function (d) { return d3.hsl(d.data.color).darker(0.7); })
                .attr("d", function (d) { return pieOuter(d, rx - .5, ry - .5, h); })
                .each(function (d) { this._current = d; })



            slices.selectAll(".percent").data(_data).enter().append("text").attr("class", "percent")
                .attr("x", function (d) { return 0.6 * rx * Math.cos(0.5 * (d.startAngle + d.endAngle)); })
                .attr("y", function (d) { return 0.6 * ry * Math.sin(0.5 * (d.startAngle + d.endAngle)); })
                .text(getPercent).each(function (d) { this._current = d; });

            var legendG = svg_pie.selectAll(".legend") // note appending it to mySvg and not svg to make positioning easier
                .data(_data)
                .enter().append("g")
                .attr("transform", function (d, i) {
                    return "translate(" + (x + rx) + "," + (i * 15 + 30) + ")"; // place each legend on the right and bump each one down 15 pixels
                })
                .attr("class", "legend");

            legendG.append("rect") // make a matching color rect
                .attr("width", 10)
                .attr("height", 10)
                .attr("fill", function (d, i) {

                    return d.data.color;
                });

            legendG.append("text") // add the text
                .text(function (d) {

                    return d.data.label;
                })
                .style("font-size", 12)
                .attr("y", 10)
                .attr("x", 11);

        }

        this.Donut3D = Donut3D;

        //bullet

        d3.bullet = function () {
            var orient = "left", // TODO top & bottom
                reverse = false,
                duration = 0,
                ranges = bulletRanges,
                markers = bulletMarkers,
                measures = bulletMeasures,
                width = 380, //380
                height = 30, //30
                tickFormat = d3.format(",");

            // For each small multiple…
            function bullet(g) {
                g.each(function (d, i) {
                    var rangez = ranges.call(this, d, i).slice().sort(d3.descending),
                        markerz = markers.call(this, d, i).slice().sort(d3.descending),
                        measurez = measures.call(this, d, i).slice().sort(d3.descending),
                        g = d3.select(this);

                    // Compute the new x-scale.
                    var x1 = d3.scaleLinear()
                        .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])
                        .range(reverse ? [width, 0] : [0, width]);

                    // Retrieve the old x-scale, if this is an update.
                    var x0 = this.__chart__ || d3.scaleLinear()
                        .domain([0, Infinity])
                        .range(x1.range());

                    // Stash the new scale.
                    this.__chart__ = x1;

                    // Derive width-scales from the x-scales.
                    var w0 = bulletWidth(x0),
                        w1 = bulletWidth(x1);

                    // Update the range rects.
                    var range = g.selectAll("rect.range")
                        .data(rangez);

                    range.enter().append("rect")
                        .attr("class", function (d, i) { return "range s" + i; })
                        .attr("width", w0)
                        .attr("height", height)
                        .attr("x", reverse ? x0 : 0)
                        .transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("x", reverse ? x1 : 0);

                    range.transition()
                        .duration(duration)
                        .attr("x", reverse ? x1 : 0)
                        .attr("width", w1)
                        .attr("height", height);

                    // Update the measure rects.
                    var measure = g.selectAll("rect.measure")
                        .data(measurez);

                    measure.enter().append("rect")
                        .attr("class", function (d, i) { return "measure s" + i; })
                        .attr("width", w0)
                        .attr("height", height / 3)
                        .attr("x", reverse ? x0 : 0)
                        .attr("y", height / 3)
                        .transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("x", reverse ? x1 : 0);

                    measure.transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("height", height / 3)
                        .attr("x", reverse ? x1 : 0)
                        .attr("y", height / 3);

                    // Update the marker lines.
                    var marker = g.selectAll("line.marker")
                        .data(markerz);

                    marker.enter().append("line")
                        .attr("class", "marker")
                        .attr("x1", x0)
                        .attr("x2", x0)
                        .attr("y1", height / 6)
                        .attr("y2", height * 5 / 6)
                        .transition()
                        .duration(duration)
                        .attr("x1", x1)
                        .attr("x2", x1);

                    marker.transition()
                        .duration(duration)
                        .attr("x1", x1)
                        .attr("x2", x1)
                        .attr("y1", height / 6)
                        .attr("y2", height * 5 / 6);

                    // Compute the tick format.
                    var format = tickFormat || x1.tickFormat(8);

                    // Update the tick groups.
                    var tick = g.selectAll("g.tick")
                        .data(x1.ticks(8), function (d) {
                            return this.textContent || format(d);
                        });

                    // Initialize the ticks with the old scale, x0.
                    var tickEnter = tick.enter().append("g")
                        .attr("class", "tick")
                        .attr("transform", bulletTranslate(x0))
                        .style("opacity", 1e-6);

                    tickEnter.append("line")
                        .attr("y1", height)
                        .attr("y2", height * 7 / 6);

                    tickEnter.append("text")
                        .attr("text-anchor", "middle")
                        .attr("dy", "1em")
                        .attr("y", height * 7 / 6)
                        .text(format);

                    // Transition the entering ticks to the new scale, x1.
                    tickEnter.transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1);

                    // Transition the updating ticks to the new scale, x1.
                    var tickUpdate = tick.transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1);

                    tickUpdate.select("line")
                        .attr("y1", height)
                        .attr("y2", height * 7 / 6);

                    tickUpdate.select("text")
                        .attr("y", height * 7 / 6);

                    // Transition the exiting ticks to the new scale, x1.
                    tick.exit().transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1e-6)
                        .remove();
                });
                //d3.timer.flush();
            }

            // left, right, top, bottom
            bullet.orient = function (x) {
                if (!arguments.length) return orient;
                orient = x;
                reverse = orient == "right" || orient == "bottom";
                return bullet;
            };

            // ranges (bad, satisfactory, good)
            bullet.ranges = function (x) {
                if (!arguments.length) return ranges;
               
                ranges = x;
                return bullet;
            };

            // markers (previous, goal)
            bullet.markers = function (x) {
                if (!arguments.length) return markers;
                markers = x;
                return bullet;
            };

            // measures (actual, forecast)
            bullet.measures = function (x) {
                if (!arguments.length) return measures;
                measures = x;
                return bullet;
            };

            bullet.width = function (x) {
                if (!arguments.length) return width;
                width = x;
                return bullet;
            };

            bullet.height = function (x) {
                if (!arguments.length) return height;
                height = x;
                return bullet;
            };

            bullet.tickFormat = function (x) {
                if (!arguments.length) return tickFormat;
                tickFormat = x;
                return bullet;
            };

            bullet.duration = function (x) {
                if (!arguments.length) return duration;
                duration = x;
                return bullet;
            };

            return bullet;
        };

        function bulletRanges(d) {
            return d.ranges;
        }

        function bulletMarkers(d) {
            return d.markers;
        }

        function bulletMeasures(d) {
            return d.measures;
        }

        function bulletTranslate(x) {
            return function (d) {
                return "translate(" + x(d) + ",0)";
            };
        }

        function bulletWidth(x) {
            var x0 = x(0);
            return function (d) {
                return Math.abs(x(d) - x0);
            };
        }

        //till this bullet


        //status bar-timeline

        d3.timeline = function () {
            var DISPLAY_TYPES = ["circle", "rect"];

            var hover = function () { },
                mouseover = function () { },
                mouseout = function () { },
                click = function () { },
                scroll = function () { },
                labelFunction = function (label) { return label; },
                navigateLeft = function () { },
                navigateRight = function () { },
                orient = "bottom",
                width = document.getElementById("status_bar").clientWidth,
                height = null,
                rowSeparatorsColor = null,
                backgroundColor = null,
                tickFormat = {
                    //format: d3.timeFormat("%I %p"),
                    format: d3.timeFormat("%H:%M"),
                    tickTime: d3.timeFormat.hours,
                    tickInterval: 1,
                    tickSize: 6,
                    tickValues: null
                },
                colorCycle = d3.scaleOrdinal(d3.schemeCategory10);
                colorPropertyName = null,
                display = "rect",
                beginning = 0,
                labelMargin = 0,
                ending = 0,
                margin = { left: 30, right: 30, top: 30, bottom: 30 },
                stacked = false,
                rotateTicks = false,
                timeIsRelative = false,
                fullLengthBackgrounds = true,
                itemHeight = 20,
                itemMargin = 5,
                navMargin = 60,
                showTimeAxis = true,
                showAxisTop = false,
                showTodayLine = false,
                timeAxisTick = false,
                timeAxisTickFormat = { stroke: "stroke-dasharray", spacing: "4 10" },
                showTodayFormat = { marginTop: 25, marginBottom: 0, width: 1, color: colorCycle },
                showBorderLine = false,
                showBorderFormat = { marginTop: 25, marginBottom: 0, width: 1, color: colorCycle },
                showAxisHeaderBackground = false,
                showAxisNav = false,
                showAxisCalendarYear = false,
                axisBgColor = "white",
                chartData = {}
                ;

            var appendTimeAxis = function (g, xAxis, yPosition) {

                if (showAxisHeaderBackground) { appendAxisHeaderBackground(g, 0, 0); }

                if (showAxisNav) { appendTimeAxisNav(g) };

                var axis = g.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(" + 0 + "," + yPosition + ")")
                    .call(xAxis);
            };

            var appendTimeAxisCalendarYear = function (nav) {
                var calendarLabel = beginning.getFullYear();

                if (beginning.getFullYear() != ending.getFullYear()) {
                    calendarLabel = beginning.getFullYear() + "-" + ending.getFullYear()
                }

                nav.append("text")
                    .attr("transform", "translate(" + 20 + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "calendarYear")
                    .text(calendarLabel)
                    ;
            };
            var appendTimeAxisNav = function (g) {
                var timelineBlocks = 6;
                var leftNavMargin = (margin.left - navMargin);
                var incrementValue = (width - margin.left) / timelineBlocks;
                var rightNavMargin = (width - margin.right - incrementValue + navMargin);

                var nav = g.append('g')
                    .attr("class", "axis")
                    .attr("transform", "translate(0, 20)")
                    ;

                if (showAxisCalendarYear) { appendTimeAxisCalendarYear(nav) };

                nav.append("text")
                    .attr("transform", "translate(" + leftNavMargin + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "chevron")
                    .text("<")
                    .on("click", function () {
                        return navigateLeft(beginning, chartData);
                    })
                    ;

                nav.append("text")
                    .attr("transform", "translate(" + rightNavMargin + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "chevron")
                    .text(">")
                    .on("click", function () {
                        return navigateRight(ending, chartData);
                    })
                    ;
            };

            var appendAxisHeaderBackground = function (g, xAxis, yAxis) {
                g.insert("rect")
                    .attr("class", "row-green-bar")
                    .attr("x", xAxis)
                    .attr("width", width)
                    .attr("y", yAxis)
                    .attr("height", itemHeight)
                    .attr("fill", axisBgColor);
            };

            var appendTimeAxisTick = function (g, xAxis, maxStack) {
                g.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(" + 0 + "," + (margin.top + (itemHeight + itemMargin) * maxStack) + ")")
                    .attr(timeAxisTickFormat.stroke, timeAxisTickFormat.spacing)
                    .call(xAxis.tickFormat("").tickSize(-(margin.top + (itemHeight + itemMargin) * (maxStack - 1) + 3), 0, 0));
            };

            var appendBackgroundBar = function (yAxisMapping, index, g, data, datum) {
                var greenbarYAxis = ((itemHeight + itemMargin) * yAxisMapping[index]) + margin.top;
                g.selectAll("svg").data(data).enter()
                    .insert("rect")
                    .attr("class", "row-green-bar")
                    .attr("x", fullLengthBackgrounds ? 0 : margin.left)
                    .attr("width", fullLengthBackgrounds ? width : (width - margin.right - margin.left))
                    .attr("y", greenbarYAxis)
                    .attr("height", itemHeight)
                    .attr("fill", backgroundColor instanceof Function ? backgroundColor(datum, index) : backgroundColor)
                    ;
            };

            var appendLabel = function (gParent, yAxisMapping, index, hasLabel, datum) {
                var fullItemHeight = itemHeight + itemMargin;
                var rowsDown = margin.top + (fullItemHeight / 2) + fullItemHeight * (yAxisMapping[index] || 1);

                gParent.append("text")
                    .attr("class", "timeline-label")
                    .attr("transform", "translate(" + labelMargin + "," + rowsDown + ")")
                    .text(hasLabel ? labelFunction(datum.label) : datum.id)
                    .on("click", function (d, i) { click(d, index, datum); });
            };

            function timeline(gParent) {
                console.log('gparent ' + gParent)
              
                var g = gParent.append("g");
                //var gParentSize = gParent[0][0].getBoundingClientRect();
                var gParentSize = gParent.node().getBoundingClientRect();
                var gParentItem = d3.select(gParent.node());

                var yAxisMapping = {},
                    maxStack = 1,
                    minTime = 0,
                    maxTime = 0;

                setWidth();

                // check if the user wants relative time
                // if so, substract the first timestamp from each subsequent timestamps
                if (timeIsRelative) {
                    g.each(function (d, i) {
                        d.forEach(function (datum, index) {
                            datum.times.forEach(function (time, j) {
                                if (index === 0 && j === 0) {
                                    originTime = time.starting_time;               //Store the timestamp that will serve as origin
                                    time.starting_time = 0;                        //Set the origin
                                    time.ending_time = time.ending_time - originTime;     //Store the relative time (millis)
                                } else {
                                    time.starting_time = time.starting_time - originTime;
                                    time.ending_time = time.ending_time - originTime;
                                }
                            });
                        });
                    });
                }

                // check how many stacks we're gonna need
                // do this here so that we can draw the axis before the graph
                if (stacked || ending === 0 || beginning === 0) {
                    g.each(function (d, i) {
                        d.forEach(function (datum, index) {

                            // create y mapping for stacked graph
                            if (stacked && Object.keys(yAxisMapping).indexOf(index) == -1) {
                                yAxisMapping[index] = maxStack;
                                maxStack++;
                            }

                            // figure out beginning and ending times if they are unspecified
                            datum.times.forEach(function (time, i) {
                                if (beginning === 0)
                                    if (time.starting_time < minTime || (minTime === 0 && timeIsRelative === false))
                                        minTime = time.starting_time;
                                if (ending === 0)
                                    if (time.ending_time > maxTime)
                                        maxTime = time.ending_time;
                            });
                        });
                    });

                    if (ending === 0) {
                        ending = maxTime;
                    }
                    if (beginning === 0) {
                        beginning = minTime;
                    }
                }

                var scaleFactor = (1 / (ending - beginning)) * (width - margin.left - margin.right);

                // draw the axis
                var xScale = d3.scaleTime()
                    .domain([beginning, ending])
                    .range([margin.left, width - margin.right]);

                var xAxis = d3.axisBottom(xScale)
                  
                    .tickFormat(tickFormat.format)
                    .tickSize(tickFormat.tickSize);

                if (tickFormat.tickValues != null) {
                    xAxis.tickValues(tickFormat.tickValues);
                } else {
                    xAxis.ticks(tickFormat.numTicks || tickFormat.tickTime, tickFormat.tickInterval);
                }

                // draw the chart
                g.each(function (d, i) {
                    chartData = d;
                    d.forEach(function (datum, index) {
                        var data = datum.times;
                        var hasLabel = (typeof (datum.label) != "undefined");

                        // issue warning about using id per data set. Ids should be individual to data elements
                        if (typeof (datum.id) != "undefined") {
                            console.warn("d3Timeline Warning: Ids per dataset is deprecated in favor of a 'class' key. Ids are now per data element.");
                        }

                        if (backgroundColor) { appendBackgroundBar(yAxisMapping, index, g, data, datum); }

                        g.selectAll("svg").data(data).enter()
                            .append(function (d, i) {
                                return document.createElementNS(d3.namespaces.svg, "display" in d ? d.display : display);
                            })
                            .attr("x", getXPos)
                            .attr("y", getStackPosition)
                            .attr("width", function (d, i) {
                                return (d.ending_time - d.starting_time) * scaleFactor;
                            })
                            .attr("cy", function (d, i) {
                                return getStackPosition(d, i) + itemHeight / 2;
                            })
                            .attr("cx", getXPos)
                            .attr("r", itemHeight / 2)
                            .attr("height", itemHeight)
                            .style("fill", function (d, i) {
                                var dColorPropName;
                                if (d.color) return d.color;
                                if (colorPropertyName) {
                                    dColorPropName = d[colorPropertyName];
                                    if (dColorPropName) {
                                        return colorCycle(dColorPropName);
                                    } else {
                                        return colorCycle(datum[colorPropertyName]);
                                    }
                                }
                                return colorCycle(index);
                            })
                            .on("mousemove", function (d, i) {
                                hover(d, index, datum);
                            })
                            .on("mouseover", function (d, i) {
                                mouseover(d, i, datum);
                            })
                            .on("mouseout", function (d, i) {
                                mouseout(d, i, datum);
                            })
                            .on("click", function (d, i) {
                                click(d, index, datum);
                            })
                            .attr("class", function (d, i) {
                                return datum.class ? "timelineSeries_" + datum.class : "timelineSeries_" + index;
                            })
                            .attr("id", function (d, i) {
                                // use deprecated id field
                                if (datum.id && !d.id) {
                                    return 'timelineItem_' + datum.id;
                                }

                                return d.id ? d.id : "timelineItem_" + index + "_" + i;
                            })
                            ;

                        g.selectAll("svg").data(data).enter()
                            .append("text")
                            .attr("x", getXTextPos)
                            .attr("y", getStackTextPosition)
                            .text(function (d) {
                                return d.label;
                            })
                            ;

                        if (rowSeparatorsColor) {
                            var lineYAxis = (itemHeight + itemMargin / 2 + margin.top + (itemHeight + itemMargin) * yAxisMapping[index]);
                            gParent.append("svg:line")
                                .attr("class", "row-separator")
                                .attr("x1", 0 + margin.left)
                                .attr("x2", width - margin.right)
                                .attr("y1", lineYAxis)
                                .attr("y2", lineYAxis)
                                .attr("stroke-width", 1)
                                .attr("stroke", rowSeparatorsColor);
                        }

                        // add the label
                        if (hasLabel) { appendLabel(gParent, yAxisMapping, index, hasLabel, datum); }

                        if (typeof (datum.icon) !== "undefined") {
                            gParent.append("image")
                                .attr("class", "timeline-label")
                                .attr("transform", "translate(" + 0 + "," + (margin.top + (itemHeight + itemMargin) * yAxisMapping[index]) + ")")
                                .attr("xlink:href", datum.icon)
                                .attr("width", margin.left)
                                .attr("height", itemHeight);
                        }

                        function getStackPosition(d, i) {
                            if (stacked) {
                                return margin.top + (itemHeight + itemMargin) * yAxisMapping[index];
                            }
                            return margin.top;
                        }
                        function getStackTextPosition(d, i) {
                            if (stacked) {
                                return margin.top + (itemHeight + itemMargin) * yAxisMapping[index] + itemHeight * 0.75;
                            }
                            return margin.top + itemHeight * 0.75;
                        }
                    });
                });

                var belowLastItem = (margin.top + (itemHeight + itemMargin) * maxStack);
                var aboveFirstItem = margin.top;
                var timeAxisYPosition = showAxisTop ? aboveFirstItem : belowLastItem;
                if (showTimeAxis) { appendTimeAxis(g, xAxis, timeAxisYPosition); }
                if (timeAxisTick) { appendTimeAxisTick(g, xAxis, maxStack); }

                if (width > gParentSize.width) {
                    var move = function () {
                        var x = Math.min(0, Math.max(gParentSize.width - width, d3.event.translate[0]));
                        zoom.translate([x, 0]);
                        g.attr("transform", "translate(" + x + ",0)");
                        scroll(x * scaleFactor, xScale);
                    };

                    var zoom = d3.behavior.zoom().x(xScale).on("zoom", move);

                    gParent
                        .attr("class", "scrollable")
                        .call(zoom);
                }

                if (rotateTicks) {
                    g.selectAll(".tick text")
                        .attr("transform", function (d) {
                            return "rotate(" + rotateTicks + ")translate("
                                + (this.getBBox().width / 2 + 10) + "," // TODO: change this 10
                                + this.getBBox().height / 2 + ")";
                        });
                }

                var gSize = g.node().getBoundingClientRect();
                setHeight();

                if (showBorderLine) {
                    g.each(function (d, i) {
                        d.forEach(function (datum) {
                            var times = datum.times;
                            times.forEach(function (time) {
                                appendLine(xScale(time.starting_time), showBorderFormat);
                                appendLine(xScale(time.ending_time), showBorderFormat);
                            });
                        });
                    });
                }

                if (showTodayLine) {
                    var todayLine = xScale(new Date());
                    appendLine(todayLine, showTodayFormat);
                }

                function getXPos(d, i) {
                    return margin.left + (d.starting_time - beginning) * scaleFactor;
                }

                function getXTextPos(d, i) {
                    return margin.left + (d.starting_time - beginning) * scaleFactor + 5;
                }

                function setHeight() {
                    if (!height && !gParentItem.attr("height")) {
                        if (itemHeight) {
                            // set height based off of item height
                            height = gSize.height + gSize.top - gParentSize.top;
                            // set bounding rectangle height
                            d3.select(gParent.node()).attr("height", height);
                        } else {
                            throw "height of the timeline is not set";
                        }
                    } else {
                        if (!height) {
                            height = gParentItem.attr("height");
                        } else {
                            gParentItem.attr("height", height);
                        }
                    }
                }

                function setWidth() {
                    if (!width && !gParentSize.width) {
                        try {
                            width = gParentItem.attr("width");
                            if (!width) {
                                throw "width of the timeline is not set. As of Firefox 27, timeline().with(x) needs to be explicitly set in order to render";
                            }
                        } catch (err) {
                            console.log(err);
                        }
                    } else if (!(width && gParentSize.width)) {
                        try {
                            width = gParentItem.attr("width");
                        } catch (err) {
                            console.log(err);
                        }
                    }
                    // if both are set, do nothing
                }

                function appendLine(lineScale, lineFormat) {
                    gParent.append("svg:line")
                        .attr("x1", lineScale)
                        .attr("y1", lineFormat.marginTop)
                        .attr("x2", lineScale)
                        .attr("y2", height - lineFormat.marginBottom)
                        .style("stroke", lineFormat.color)//"rgb(6,120,155)")
                        .style("stroke-width", lineFormat.width);
                }

            }

            // SETTINGS

            timeline.margin = function (p) {
                if (!arguments.length) return margin;
                margin = p;
                return timeline;
            };

            timeline.orient = function (orientation) {
                if (!arguments.length) return orient;
                orient = orientation;
                return timeline;
            };

            timeline.itemHeight = function (h) {
                if (!arguments.length) return itemHeight;
                itemHeight = h;
                return timeline;
            };

            timeline.itemMargin = function (h) {
                if (!arguments.length) return itemMargin;
                itemMargin = h;
                return timeline;
            };

            timeline.navMargin = function (h) {
                if (!arguments.length) return navMargin;
                navMargin = h;
                return timeline;
            };

            timeline.height = function (h) {
                if (!arguments.length) return height;
                height = h;
                return timeline;
            };

            timeline.width = function (w) {
                if (!arguments.length) return width;
                width = w;
                return timeline;
            };

            timeline.display = function (displayType) {
                if (!arguments.length || (DISPLAY_TYPES.indexOf(displayType) == -1)) return display;
                display = displayType;
                return timeline;
            };

            timeline.labelFormat = function (f) {
                if (!arguments.length) return labelFunction;
                labelFunction = f;
                return timeline;
            };

            timeline.tickFormat = function (format) {
                if (!arguments.length) return tickFormat;
                tickFormat = format;
                return timeline;
            };

            timeline.hover = function (hoverFunc) {
                if (!arguments.length) return hover;
                hover = hoverFunc;
                return timeline;
            };

            timeline.mouseover = function (mouseoverFunc) {
                if (!arguments.length) return mouseover;
                mouseover = mouseoverFunc;
                return timeline;
            };

            timeline.mouseout = function (mouseoutFunc) {
                if (!arguments.length) return mouseout;
                mouseout = mouseoutFunc;
                return timeline;
            };

            timeline.click = function (clickFunc) {
                if (!arguments.length) return click;
                click = clickFunc;
                return timeline;
            };

            timeline.scroll = function (scrollFunc) {
                if (!arguments.length) return scroll;
                scroll = scrollFunc;
                return timeline;
            };

            timeline.colors = function (colorFormat) {
                if (!arguments.length) return colorCycle;
                colorCycle = colorFormat;
                return timeline;
            };

            timeline.beginning = function (b) {
                if (!arguments.length) return beginning;
                beginning = b;
                return timeline;
            };

            timeline.ending = function (e) {
                if (!arguments.length) return ending;
                ending = e;
                return timeline;
            };

            timeline.labelMargin = function (m) {
                if (!arguments.length) return labelMargin;
                labelMargin = m;
                return timeline;
            };

            timeline.rotateTicks = function (degrees) {
                if (!arguments.length) return rotateTicks;
                rotateTicks = degrees;
                return timeline;
            };

            timeline.stack = function () {
                stacked = !stacked;
                return timeline;
            };

            timeline.relativeTime = function () {
                timeIsRelative = !timeIsRelative;
                return timeline;
            };

            timeline.showBorderLine = function () {
                showBorderLine = !showBorderLine;
                return timeline;
            };

            timeline.showBorderFormat = function (borderFormat) {
                if (!arguments.length) return showBorderFormat;
                showBorderFormat = borderFormat;
                return timeline;
            };

            timeline.showToday = function () {
                showTodayLine = !showTodayLine;
                return timeline;
            };

            timeline.showTodayFormat = function (todayFormat) {
                if (!arguments.length) return showTodayFormat;
                showTodayFormat = todayFormat;
                return timeline;
            };

            timeline.colorProperty = function (colorProp) {
                if (!arguments.length) return colorPropertyName;
                colorPropertyName = colorProp;
                return timeline;
            };

            timeline.rowSeparators = function (color) {
                if (!arguments.length) return rowSeparatorsColor;
                rowSeparatorsColor = color;
                return timeline;

            };

            timeline.background = function (color) {
                if (!arguments.length) return backgroundColor;
                backgroundColor = color;
                return timeline;
            };

            timeline.showTimeAxis = function () {
                showTimeAxis = !showTimeAxis;
                return timeline;
            };

            timeline.showAxisTop = function () {
                showAxisTop = !showAxisTop;
                return timeline;
            };

            timeline.showAxisCalendarYear = function () {
                showAxisCalendarYear = !showAxisCalendarYear;
                return timeline;
            };

            timeline.showTimeAxisTick = function () {
                timeAxisTick = !timeAxisTick;
                return timeline;
            };

            timeline.fullLengthBackgrounds = function () {
                fullLengthBackgrounds = !fullLengthBackgrounds;
                return timeline;
            };

            timeline.showTimeAxisTickFormat = function (format) {
                if (!arguments.length) return timeAxisTickFormat;
                timeAxisTickFormat = format;
                return timeline;
            };

            timeline.showAxisHeaderBackground = function (bgColor) {
                showAxisHeaderBackground = !showAxisHeaderBackground;
                if (bgColor) { (axisBgColor = bgColor) };
                return timeline;
            };

            timeline.navigate = function (navigateBackwards, navigateForwards) {
                if (!arguments.length) return [navigateLeft, navigateRight];
                navigateLeft = navigateBackwards;
                navigateRight = navigateForwards;
                showAxisNav = !showAxisNav;
                return timeline;
            };

            return timeline;
            
        };
    }();

   
 

   
    //function for bullet chart
    
</script>
<script>
    function update(progressData) {
        var dId = d3.select("#progress_chart1");
       // var dId = d3.select(id);

        d3.select("#progress_chart1").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_chart1") //id
            .data(progressData);
           

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");
           

        //Create the bars
        d3.select("#progress_chart1").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");
            

        //Create the path
        d3.select("#progress_chart1").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_chart1").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart();
    }


    //Animate the bars when they are both visible on screen
    function loadChart() {

        var start_val = 0;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_chart1").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_chart1").selectAll(".path")  //id
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update1(progressData) {
        var dId = d3.select("#progress_avail");
        // var dId = d3.select(id);
        d3.select("#progress_avail").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_avail") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_avail").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_avail").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_avail").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart1();
    }


    //Animate the bars when they are both visible on screen
    function loadChart1() {

        var start_val = 0;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_avail").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_avail").selectAll(".path")  //id
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update2(progressData) {
        var dId = d3.select("#progress_perf");
        // var dId = d3.select(id);
        d3.select("#progress_perf").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_perf") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_perf").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_perf").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_perf").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart2();
    }


    //Animate the bars when they are both visible on screen
    function loadChart2() {

        var start_val = 0;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_perf").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_perf").selectAll(".path")  //id
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update3(progressData) {
        var dId = d3.select("#progress_quality");
        // var dId = d3.select(id);
        d3.select("#progress_quality").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_quality") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_quality").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_quality").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_quality").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart3();
    }


    //Animate the bars when they are both visible on screen
    function loadChart3() {

        var start_val = 0;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_quality").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_quality").selectAll(".path")  //id
            .transition()
            .delay(function (d, i) {
                return 200;
            })
            .duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
</script>
<style>
    #skills {
        margin: 25px 0 0 20px;
    }

    #rightSkills {
        width: 350px;
        min-height: 100px;
        margin-bottom: 50px;
        padding: 25px 0 0 25px;
        float: left;
    }

    .shadow {
        display: block;
        width: 0px;
        height: 20px;
        margin-bottom: 5px;
        margin-left: 10px;
        box-shadow: -5px 1px 1px #888888;
        border-radius: 10px;
    }

    .bar1 {
        display: block;
        width: 302px;
        height: 20px;
        margin-left: -10px;
        background-color: white;
        overflow: hidden;
    }

    .path {
        display: block;
        height: 18px;
        width: 0px;
        background-color: white;
        border: 1px solid rgba(0, 0, 0, 0.5);
        overflow: hidden;
    }

    .pattern {
        height: 100%;
        width: 100%;
        background-color: cadetblue;
    }

    .percentage {
        margin-left: 0px;
        text-align: center;
        font-family: "Verdana", sans-serif;
        font-size: 0.8em;
        line-height: 18px;
        color: white;
    }
    .blinking{
	animation:blinkingText 5s infinite;
}
    #status_blinking {
        animation: blinkingcircle 1s infinite;
    }
@@keyframes blinkingText{
	0%{		color: #000;	}
    49% {
        color: #000;
    }
    50% {
        color: #000;
    }
	99%{	color:transparent;	}
	100%{	color: #000;	}


}
    @@keyframes blinkingcircle {
       

        100% {
            opacity: 0;
        }
    }
</style>