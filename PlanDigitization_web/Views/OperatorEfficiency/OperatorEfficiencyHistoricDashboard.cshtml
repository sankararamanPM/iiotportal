
@{
    ViewBag.Title = "OperatorEfficiencyHistoricDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* set the CSS */
    body {
        font: 12px Arial;
    }

    path {
        stroke: steelblue;
        stroke-width: 2;
        fill: none;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: grey;
        stroke-width: 1;
        shape-rendering: crispEdges;
    }

    .legend {
        font-size: 16px;
        font-weight: bold;
        text-anchor: middle;
    }
</style>
<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.css">
<header class="page-header">
    <h2>Operator Efficiency</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("Dashboard","Main")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            <li><span>Historic Data & Analytics</span></li>
            <li><span>Operator Efficiency</span></li>
        </ol>
    </div>
</header>
@if (ViewContext.Controller.HasPermission("OperatorEfficiencyHistoric-View"))
{
    <div class="form-group">
        <div class="row">
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
            </div>
            <div class="btn-group">
                <select id="linecode" class="form-control" name="linecode" title="*"></select>
            </div>&nbsp;
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Machine </label>
            </div>
            <div class="btn-group">
                <select id="machinecode" class="form-control" name="machinecode" title="*"></select>
            </div>&nbsp;
            
        </div>
        <div class="row" style="margin-top:2%">
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Variant </label>
            </div>
            <div class="btn-group">
                <select id="variantcode" class="form-control" name="variantcode" title="*"></select>
            </div>&nbsp;
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Operator </label>
            </div>
            <div class="btn-group">
                <select id="operatorid" class="form-control" name="operatorid" title="*"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="custom" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-2 control-label">Date range</label>
                                <div class="col-md-6">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchcustom_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_custom()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Operator Name : <span id="custom_operatorname"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container'>
                                    <svg />
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe">Select Year</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchyear_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_year()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Operator Name : <span id="yearly_operatorname"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report">
                                    @* <svg />*@
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label">Select Month</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchmonth_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_month()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Operator Name : <span id="monthly_operatorname"></span></button>
                                </div>
                            </header>
                            <div class="tabs">
                                <ul class="nav nav-tabs" id="nav">
                                    <li class="active" id="month_weekly">
                                        <a href="#weekly" data-toggle="tab">Weekly</a>
                                    </li>
                                    <li id="month_daily">
                                        <a href="#daily" data-toggle="tab">Daily</a>
                                    </li>
                                    <li id="month_shift">
                                        <a href="#shift" data-toggle="tab">Shift-wise</a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div id="weekly" class="tab-pane active">
                                        <!-- Flot: Basic -->
                                        <div id='container' class="monthly_week">
                                            <div id="d3id"></div>
                                        </div>
                                    </div>
                                    <div id="daily" class="tab-pane">
                                        <div id='container' class="month_daily">

                                        </div>
                                    </div>
                                    <div id="shift" class="tab-pane">
                                        <div id='container' class="month_shift">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}
<!-- end: page -->
<script src="~/assets/javascripts/swal.js"></script>
<script src="~/assets/javascripts/swal_alert.js"></script>
<script src="~/assets/datepicker_normal/jquery-1.7.2.min.js"></script>
<script src="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        startView: 2,
        endDate: '+0y',
        orientation: "bottom"
    });
</script>
<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        if (CompanyCode == "" && PlantCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer and Plant...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "") {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            else
                if (PlantCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
                    var myData = {
                        "Flag": "LineCode",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Line</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#linecode").html(s);
                        },
                        error: function (response) {

                        }
                    });

                    var data1 = {
                        "Flag": "Subsystem",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: data1,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Machine</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#machinecode").html(s);
                        },
                        error: function (response) {

                        }
                    });

                    var data2 = {
                        "Flag": "Variant",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: data2,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Variant</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#variantcode").html(s);
                        },
                        error: function (response) {

                        }
                    });

                    var data3 = {
                        "Flag": "Get_Operator",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: data3,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Operator</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#operatorid").html(s);
                        },
                        error: function (response) {

                        }
                    });
                }

    });

     function Reset_custom() {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove();
    }

    function Reset_year() {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    }

    function Reset_month() {
        $('#month').val('');
        d3.select(".monthly_week svg").remove();
        d3.select(".month_daily svg").remove();
        d3.select(".month_shift svg").remove();
    }
</script>
<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

    function Searchcustom_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var variantcode = $('#variantcode').val();
        var operatorid=$('#operatorid').val();
        var start = $('#start').val();
        var end = $('#end').val();

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
        }
        else if (operatorid == '') {
                swal({
                    icon: "error",
                    title: "Please Provide operator details",
                    button: false,
                    timer: 4500
                })
        }
        else if (start == '') {
                swal({
                    icon: "error",
                    title: "Please Provide start date",
                    button: false,
                    timer: 4500
                })
        }
        else if (end == '') {
                swal({
                    icon: "error",
                    title: "Please Provide end date",
                    button: false,
                    timer: 4500
                })
        }
         else {
             if (start>end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                    "linecode": linecode,
                    "machinecode": machinecode,
                    "variantcode": variantcode,
                    "operatorid": operatorid,
                    "FromDate": start,
                    "ToDate": end,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
            };
            var sample;
            $.ajax({
                type: "POST",
                url: URL + 'api/OperatorEfficiency/Getcustomwisereport',
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                dataType: "json",
                success: function (response) {
                    console.log(response);
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        $('#custom_operatorname').text(response.data.Table[0].OperatorName);
                        models = response.data.Table;
                        var container = d3.select('#container'),
                                        width = 840,
                                        height = 440,
                                        margin = { top: 180, right: 20, bottom: 0, left: 50 },
                                        barPadding = .2,
                                        axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                        var svg = container
                            .append("svg")
                            .attr("width", width)
                            .attr("height", height)
                            .append("g")
                            .attr("transform", `translate(${margin.left},${margin.top})`);
                        var xScale0 = d3.scaleBand().range([0, width - margin.left - margin.right]).padding(barPadding);
                        var xScale1 = d3.scaleBand();
                        var yScale = d3.scaleLinear().range([height - margin.top - margin.bottom, 0]);

                        var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                        var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                        xScale0.domain(models.map((d) => d.Name));
                        xScale1.domain(['ExpectedCT', 'AverageCT']).range([0, xScale0.bandwidth()]);
                        yScale.domain([0,d3.max(models, d => d.ExpectedCT > d.AverageCT ? d.ExpectedCT : d.AverageCT)]);

                        var Name = svg.selectAll(".Name")
                            .data(models)
                            .enter().append("g")
                            .attr("class", "Name")
                            .attr("transform", d => `translate(${xScale0(d.Name)},0)`);

                        /* Add ExpectedCT bars */
                        Name.selectAll(".bar.ExpectedCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar ExpectedCT")
                            .style("fill", "#CF3E30")
                            .attr("x", (d) => xScale1('ExpectedCT'))
                            .attr("y", (d) => yScale(d.ExpectedCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.ExpectedCT)
                            });

                        /* Add AverageCT bars */
                        Name.selectAll(".bar.AverageCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar AverageCT")
                            .style("fill", "#30C1CF")
                            .attr("x", (d) => xScale1('AverageCT'))
                            .attr("y", (d) => yScale(d.AverageCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.AverageCT)
                            });

                        // Add the X Axis
                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", `translate(0,${height - margin.top - margin.bottom})`)
                            .call(xAxis);

                        // Add the Y Axis
                        svg.append("g")
                            .attr("class", "y axis")
                            .call(yAxis);
                        svg.append("circle").attr("cx",800).attr("cy",0).attr("r", 6).style("fill", "#CF3E30")
                        svg.append("circle").attr("cx",800).attr("cy",30).attr("r", 6).style("fill", "#30C1CF")
                        svg.append("text").attr("x", 820).attr("y", 0).text("ExpectedCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", 820).attr("y", 30).text("AverageCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append('text')
                        .attr('class', 'label')
                            .attr('x', -100)
                            .attr('y', -30)
                        .attr('transform', 'rotate(-90)')
                        .attr('text-anchor', 'middle')
                        .text('Cycle Time')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', 400)
                            .attr('y', 300)
                            .attr('text-anchor', 'middle')
                            .text(response.data.Table[0].Type)
                    }
                    else
                    {
                        $("#container").empty();
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#container").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (response) {

                }
            });
        }
    }

    function Searchyear_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var variantcode = $('#variantcode').val();
        var operatorid=$('#operatorid').val();
        var year = $('#year').val();
      if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
        }
        else if (operatorid == '') {
                swal({
                    icon: "error",
                    title: "Please Provide operator details",
                    button: false,
                    timer: 4500
                })
        }
        else if (year == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Year",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var myData = {
                "linecode": linecode,
                "machinecode": machinecode,
                "variantcode": variantcode,
                "operatorid": operatorid,
                "year": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/OperatorEfficiency/GetOPEyearwise',
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                         $('#yearly_operatorname').text(response.data.Table[0].OperatorName);
                        models = response.data.Table;
                        var container = d3.select('.year_report'),
                                        width = 840,
                                        height = 440,
                                        margin = { top: 180, right: 20, bottom: 0, left: 50 },
                                        barPadding = .2,
                                        axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                        var svg = container
                            .append("svg")
                            .attr("width", width)
                            .attr("height", height)
                            .append("g")
                            .attr("transform", `translate(${margin.left},${margin.top})`);

                        var xScale0 = d3.scaleBand().range([0, width - margin.left - margin.right]).padding(barPadding);
                        var xScale1 = d3.scaleBand();
                        var yScale = d3.scaleLinear().range([height - margin.top - margin.bottom, 0]);

                        var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                        var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                        xScale0.domain(models.map((d) => d.MName));
                        xScale1.domain(['ExpectedCT', 'AverageCT']).range([0, xScale0.bandwidth()]);
                        yScale.domain([0,d3.max(models, d => d.ExpectedCT > d.AverageCT ? d.ExpectedCT : d.AverageCT)]);

                        var MName = svg.selectAll(".MName")
                            .data(models)
                            .enter().append("g")
                            .attr("class", "MName")
                            .attr("transform", d => `translate(${xScale0(d.MName)},0)`);

                        /* Add ExpectedCT bars */
                        MName.selectAll(".bar.ExpectedCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar ExpectedCT")
                            .style("fill", "#CF3E30")
                            .attr("x", (d) => xScale1('ExpectedCT'))
                            .attr("y", (d) => yScale(d.ExpectedCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.ExpectedCT)
                            });

                        /* Add AverageCT bars */
                        MName.selectAll(".bar.AverageCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar AverageCT")
                            .style("fill", "#30C1CF")
                            .attr("x", (d) => xScale1('AverageCT'))
                            .attr("y", (d) => yScale(d.AverageCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.AverageCT)
                            });

                        // Add the X Axis
                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", `translate(0,${height - margin.top - margin.bottom})`)
                            .call(xAxis);

                        // Add the Y Axis
                        svg.append("g")
                            .attr("class", "y axis")
                            .call(yAxis);
                        svg.append('text')
                        .attr('class', 'label')
                            .attr('x', -100)
                            .attr('y', -30)
                        .attr('transform', 'rotate(-90)')
                        .attr('text-anchor', 'middle')
                        .text('Cycle Time')
                        svg.append("circle").attr("cx",800).attr("cy",0).attr("r", 6).style("fill", "#CF3E30")
                        svg.append("circle").attr("cx",800).attr("cy",30).attr("r", 6).style("fill", "#30C1CF")
                        svg.append("text").attr("x", 820).attr("y", 0).text("ExpectedCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", 820).attr("y", 30).text("AverageCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', 400)
                            .attr('y', 300)

                            .attr('text-anchor', 'middle')
                            .text('Month')

                    }
                    else
                    {
                        $(".year_report").empty();
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (result) {
                    //console.log(result);
                }
            });
        }
    }

    function Searchmonth_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var variantcode = $('#variantcode').val();
        var operatorid=$('#operatorid').val();
        var month = $('#month').val();

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
        }
        else if (operatorid == '') {
                swal({
                    icon: "error",
                    title: "Please Provide operator details",
                    button: false,
                    timer: 4500
                })
        }
        else if (month == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Month",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var chartData = [];
            var myData = {
                    "linecode": linecode,
                    "machinecode": machinecode,
                    "variantcode": variantcode,
                    "operatorid": operatorid,
                    "month": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
                };
            var myData_daily = {
                    "linecode": linecode,
                    "machinecode": machinecode,
                    "variantcode": variantcode,
                    "operatorid": operatorid,
                    "month": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
            };
            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/OperatorEfficiency/GetOPEweekwise',
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select(".monthly_week svg").remove();
                    if (response.status != "Error") {
                        $('#monthly_operatorname').text(response.data.Table[0].OperatorName);
                        models = response.data.Table;
                        var container = d3.select('.monthly_week'),
                                        width = 840,
                                        height = 440,
                                        margin = { top: 180, right: 20, bottom: 0, left: 50 },
                                        barPadding = .2,
                                        axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                        var svg = container
                            .append("svg")
                            .attr("width", width)
                            .attr("height", height)
                            .append("g")
                            .attr("transform", `translate(${margin.left},${margin.top})`);

                        var xScale0 = d3.scaleBand().range([0, width - margin.left - margin.right]).padding(barPadding);
                        var xScale1 = d3.scaleBand();
                        var yScale = d3.scaleLinear().range([height - margin.top - margin.bottom, 0]);

                        var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                        var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                        xScale0.domain(models.map((d) => d.Weekname));
                        xScale1.domain(['ExpectedCT', 'AverageCT']).range([0, xScale0.bandwidth()]);
                        yScale.domain([0,d3.max(models, d => d.ExpectedCT > d.AverageCT ? d.ExpectedCT : d.AverageCT)]);

                        var Weekname = svg.selectAll(".Weekname")
                            .data(models)
                            .enter().append("g")
                            .attr("class", "Weekname")
                            .attr("transform", d => `translate(${xScale0(d.Weekname)},0)`);

                        /* Add ExpectedCT bars */
                        Weekname.selectAll(".bar.ExpectedCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar ExpectedCT")
                            .style("fill", "#CF3E30")
                            .attr("x", (d) => xScale1('ExpectedCT'))
                            .attr("y", (d) => yScale(d.ExpectedCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.ExpectedCT)
                            });

                        /* Add AverageCT bars */
                        Weekname.selectAll(".bar.AverageCT")
                            .data(d => [d])
                            .enter()
                            .append("rect")
                            .attr("class", "bar AverageCT")
                            .style("fill", "#30C1CF")
                            .attr("x", (d) => xScale1('AverageCT'))
                            .attr("y", (d) => yScale(d.AverageCT))
                            .attr("width", xScale1.bandwidth())
                            .attr("height", (d) => {
                                return height - margin.top - margin.bottom - yScale(d.AverageCT)
                            });

                        // Add the X Axis
                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", `translate(0,${height - margin.top - margin.bottom})`)
                            .call(xAxis);

                        // Add the Y Axis
                        svg.append("g")
                            .attr("class", "y axis")
                            .call(yAxis);
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -100)
                            .attr('y', -30)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Cycle Time');
                        svg.append("circle").attr("cx",800).attr("cy",0).attr("r", 6).style("fill", "#CF3E30")
                        svg.append("circle").attr("cx",800).attr("cy",30).attr("r", 6).style("fill", "#30C1CF")
                        svg.append("text").attr("x", 820).attr("y", 0).text("ExpectedCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", 820).attr("y", 30).text("AverageCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', 400)
                            .attr('y', 300)
                            .attr('text-anchor', 'middle')
                            .text("Week");

                    }
                    else
                    {
                        $(".monthly_week").empty();
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".monthly_week").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                    //Daily Details
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: URL + 'api/OperatorEfficiency/GetOPEDaywise',
                        data: myData_daily,
                        success: function (response) {
                            d3.select(".month_daily svg").remove();
                             if (response.status != "Error") {
                                 models = response.data.Table;
                                    var container = d3.select('.month_daily'),
                                                    width = 840,
                                                    height = 440,
                                                    margin = { top: 180, right: 20, bottom: 0, left: 50 },
                                                    barPadding = .2,
                                                    axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                                    var svg = container
                                        .append("svg")
                                        .attr("width", width)
                                        .attr("height", height)
                                        .append("g")
                                        .attr("transform", `translate(${margin.left},${margin.top})`);
                                    var xScale0 = d3.scaleBand().range([0, width - margin.left - margin.right]).padding(barPadding);
                                    var xScale1 = d3.scaleBand();
                                    var yScale = d3.scaleLinear().range([height - margin.top - margin.bottom, 0]);

                                    var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                                    var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                                    xScale0.domain(models.map((d) => d.date));
                                    xScale1.domain(['ExpectedCT', 'AverageCT']).range([0, xScale0.bandwidth()]);
                                    yScale.domain([0,d3.max(models, d => d.ExpectedCT > d.AverageCT ? d.ExpectedCT : d.AverageCT)]);

                                    var date = svg.selectAll(".date")
                                        .data(models)
                                        .enter().append("g")
                                        .attr("class", "date")
                                        .attr("transform", d => `translate(${xScale0(d.date)},0)`);

                                    /* Add ExpectedCT bars */
                                    date.selectAll(".bar.ExpectedCT")
                                        .data(d => [d])
                                        .enter()
                                        .append("rect")
                                        .attr("class", "bar ExpectedCT")
                                        .style("fill", "#CF3E30")
                                        .attr("x", (d) => xScale1('ExpectedCT'))
                                        .attr("y", (d) => yScale(d.ExpectedCT))
                                        .attr("width", xScale1.bandwidth())
                                        .attr("height", (d) => {
                                            return height - margin.top - margin.bottom - yScale(d.ExpectedCT)
                                        });

                                    /* Add AverageCT bars */
                                    date.selectAll(".bar.AverageCT")
                                        .data(d => [d])
                                        .enter()
                                        .append("rect")
                                        .attr("class", "bar AverageCT")
                                        .style("fill", "#30C1CF")
                                        .attr("x", (d) => xScale1('AverageCT'))
                                        .attr("y", (d) => yScale(d.AverageCT))
                                        .attr("width", xScale1.bandwidth())
                                        .attr("height", (d) => {
                                            return height - margin.top - margin.bottom - yScale(d.AverageCT)
                                        });

                                    // Add the X Axis
                                    svg.append("g")
                                        .attr("class", "x axis")
                                        .attr("transform", `translate(0,${height - margin.top - margin.bottom})`)
                                        .call(xAxis);

                                    // Add the Y Axis
                                    svg.append("g")
                                        .attr("class", "y axis")
                                     .call(yAxis);
                                 svg.append('text')
                                     .attr('class', 'label')
                                     .attr('x', -100)
                                     .attr('y', -30)
                                     .attr('transform', 'rotate(-90)')
                                     .attr('text-anchor', 'middle')
                                     .text('Cycle Time');
                                 svg.append("circle").attr("cx",800).attr("cy",0).attr("r", 6).style("fill", "#CF3E30")
                        svg.append("circle").attr("cx",800).attr("cy",30).attr("r", 6).style("fill", "#30C1CF")
                        svg.append("text").attr("x", 820).attr("y", 0).text("ExpectedCT").style("font-size", "15px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", 820).attr("y", 30).text("AverageCT").style("font-size", "15px").attr("alignment-baseline","middle")
                                 svg.append('text')
                                     .attr('class', 'label')
                                     .attr('x', 400)
                                     .attr('y', 300)
                                     .attr('text-anchor', 'middle')
                                     .text("Date");
                                }
                             else
                             {
                                $(".month_daily").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select(".month_daily").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                             }

                            //Shift Wise Details

                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                url: URL + 'api/OperatorEfficiency/GetOPEshiftwise',
                                data: myData,
                                success: function (response) {
                                    d3.select(".month_shift svg").remove();
                                    if (response.status != "Error") {
                                 models = response.data.Table;
                                    var container = d3.select('.month_shift'),
                                                    width = 840,
                                                    height = 440,
                                                    margin = { top: 180, right: 20, bottom: 0, left: 50 },
                                                    barPadding = .2,
                                                    axisTicks = { qty: 5, outerSize: 0, dateFormat: '%m-%d' };

                                            var svg = container
                                                .append("svg")
                                                .attr("width", width)
                                                .attr("height", height)
                                                .append("g")
                                                .attr("transform", `translate(${margin.left},${margin.top})`);
                                            var xScale0 = d3.scaleBand().range([0, width - margin.left - margin.right]).padding(barPadding);
                                            var xScale1 = d3.scaleBand();
                                            var yScale = d3.scaleLinear().range([height - margin.top - margin.bottom, 0]);

                                            var xAxis = d3.axisBottom(xScale0).tickSizeOuter(axisTicks.outerSize);
                                            var yAxis = d3.axisLeft(yScale).ticks(axisTicks.qty).tickSizeOuter(axisTicks.outerSize);

                                            xScale0.domain(models.map((d) => d.Shift_ID));
                                            xScale1.domain(['ExpectedCT', 'AverageCT']).range([0, xScale0.bandwidth()]);
                                            yScale.domain([0,d3.max(models, d => d.ExpectedCT > d.AverageCT ? d.ExpectedCT : d.AverageCT)]);

                                            var Shift_ID = svg.selectAll(".Shift_ID")
                                                .data(models)
                                                .enter().append("g")
                                                .attr("class", "Shift_ID")
                                                .attr("transform", d => `translate(${xScale0(d.Shift_ID)},0)`);

                                            /* Add ExpectedCT bars */
                                            Shift_ID.selectAll(".bar.ExpectedCT")
                                                .data(d => [d])
                                                .enter()
                                                .append("rect")
                                                .attr("class", "bar ExpectedCT")
                                                .style("fill", "#CF3E30")
                                                .attr("x", (d) => xScale1('ExpectedCT'))
                                                .attr("y", (d) => yScale(d.ExpectedCT))
                                                .attr("width", xScale1.bandwidth())
                                                .attr("height", (d) => {
                                                    return height - margin.top - margin.bottom - yScale(d.ExpectedCT)
                                                });

                                            /* Add AverageCT bars */
                                            Shift_ID.selectAll(".bar.AverageCT")
                                                .data(d => [d])
                                                .enter()
                                                .append("rect")
                                                .attr("class", "bar AverageCT")
                                                .style("fill", "#30C1CF")
                                                .attr("x", (d) => xScale1('AverageCT'))
                                                .attr("y", (d) => yScale(d.AverageCT))
                                                .attr("width", xScale1.bandwidth())
                                                .attr("height", (d) => {
                                                    return height - margin.top - margin.bottom - yScale(d.AverageCT)
                                                });

                                            // Add the X Axis
                                            svg.append("g")
                                                .attr("class", "x axis")
                                                .attr("transform", `translate(0,${height - margin.top - margin.bottom})`)
                                                .call(xAxis);

                                            // Add the Y Axis
                                            svg.append("g")
                                                .attr("class", "y axis")
                                            .call(yAxis);
                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', -100)
                                            .attr('y', -30)
                                            .attr('transform', 'rotate(-90)')
                                            .attr('text-anchor', 'middle')
                                            .text('Cycle Time');
                                        svg.append("circle").attr("cx",800).attr("cy",0).attr("r", 6).style("fill", "#CF3E30")
                                        svg.append("circle").attr("cx",800).attr("cy",30).attr("r", 6).style("fill", "#30C1CF")
                                        svg.append("text").attr("x", 820).attr("y", 0).text("ExpectedCT").style("font-size", "15px").attr("alignment-baseline","middle")
                                        svg.append("text").attr("x", 820).attr("y", 30).text("AverageCT").style("font-size", "15px").attr("alignment-baseline","middle")
                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', 400)
                                            .attr('y', 300)
                                            .attr('text-anchor', 'middle')
                                            .text("Shift ID");
                                    }
                                    else
                                    {
                                        $(".month_shift").empty();
                                        var div_width = 400;
                                        var div_height = 400;
                                        var svg = d3.select(".monthly_week").append("svg")
                                            .attr("width", div_width)
                                            .attr("height", div_height)
                                            .attr("preserveAspectRatio", "xMidYMid")
                                            .append("g")
                                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                        svg.append("text")
                                            .text("No Data Available")
                                            .style("font-size", "40px");
                                    }
                                },
                                error: function (result) {
                                    //console.log(result);
                                }
                            });
                        },
                        error: function (result) {
                            //console.log(result);
                        }
                    });
                },
                error: function (result) {
                    //console.log(result);
                }
            });
        }
    }

</script>
<style>
    /* set the CSS */
    body {
        font: 12px Arial;
    }

    path {
        stroke: steelblue;
        stroke-width: 2;
        fill: none;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: grey;
        stroke-width: 1;
        shape-rendering: crispEdges;
    }

    .legend {
        font-size: 16px;
        font-weight: bold;
        text-anchor: middle;
    }
</style>
