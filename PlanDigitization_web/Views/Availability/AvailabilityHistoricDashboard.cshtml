
@{
    ViewBag.Title = "AvailabilityHistoricDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.css">
<header class="page-header">
    <h2>Availability</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("Dashboard","Main")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            <li><span>Historic Data & Analytics</span></li>
            <li><span>Availability</span></li>
        </ol>
    </div>
</header>
@if (ViewContext.Controller.HasPermission("MachineAvailabilityHistoric-View"))
{
    <div class="row">
        <div class="col-md-12">
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
            </div>
            <div class="btn-group">
                <select id="linecode" class="form-control" name="linecode" title="*"></select>
            </div>&nbsp;&nbsp;
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Machine </label>
            </div>
            <div class="btn-group">
                <select id="machinecode" class="form-control" name="machinecode" title="*"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="custom" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-2 control-label">Date range</label>
                                <div class="col-md-6">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchcustom_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_custom()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="custom_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="custom_subsystem"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability : <span id="custom_avl"></span>%</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability Considering Losses : <span id="custom_losses"></span>%</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="custom_downtime"></span>(in minutes)</button>
                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container'>
                                    <svg />
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe">Select Year</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchyear_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_year()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yearly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="yearly_subsystem"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability : <span id="yearly_avl"></span>%</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability Considering Losses : <span id="yearly_losses"></span>%</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="yearly_downtime"></span>(in minutes)</button>
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report">
                                    <svg />
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label">Select Month</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchmonth_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_month()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="monthly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="monthly_subsystem"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability : <span id="monthly_avl"></span> %</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Availability Considering Losses : <span id="monthly_losses"></span>%</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="monthly_downtime"></span>(in minutes)</button>
                                </div>
                            </header>
                            <div class="tabs">
                                <ul class="nav nav-tabs" id="nav">
                                    <li class="active" id="month_weekly">
                                        <a href="#weekly" data-toggle="tab">Weekly</a>
                                    </li>
                                    <li id="month_daily">
                                        <a href="#daily" data-toggle="tab">Daily</a>
                                    </li>
                                    <li id="month_shift">
                                        <a href="#shift" data-toggle="tab">Shift-wise</a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div id="weekly" class="tab-pane active">
                                        <!-- Flot: Basic -->
                                        <div id='container' class="monthly_week">

                                        </div>
                                    </div>
                                    <div id="daily" class="tab-pane">
                                        <div id='container' class="month_daily">

                                        </div>
                                    </div>
                                    <div id="shift" class="tab-pane">
                                        <div id='container' class="month_shift">

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="myModal" class="modal">
        <!-- Modal content -->
        <div class="modal-dialog" style="width:70%">
            <div class="modal-content">
                <div class="modal-header">
                    <span class="close">&times;</span>
                    <h2>Availability Breakdown</h2>
                </div>
                @*<div class="modal-body" id="breakdown" style="height:75%;width:20%;">
                    </div>*@
                <div class="modal-body" id="breakdown">
                    <table class="table table-bordered no-wrap" id="reasons_table">
                        <thead>
                            <tr>
                                <th>Line</th>
                                <th>Machine</th>
                                <th>Date</th>
                                <th>Start Time</th>
                                <th>End Time</th>
                                <th>Duration(in seconds)</th>
                                <th>Downtime Reason</th>
                                <th>Alarms</th>
                            </tr>
                        </thead>
                        <tbody class="body mtable"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}

    <!-- end: page -->
    <script src="~/assets/javascripts/swal.js"></script>
    <script src="~/assets/javascripts/swal_alert.js"></script>
    <script src="~/assets/datepicker_normal/jquery-1.7.2.min.js"></script>
    <script src="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
    <script src="~/Scripts/bootstrap-datepicker.js"></script>
    <script type="text/javascript">
        $(".datepic").datepicker({
            format: "yyyy-mm-dd",
            orientation: "bottom",
            endDate: '+0d'
        });

        $('.month-own').datepicker({
            format: "yyyy-mm",
            viewMode: "months",
            endDate: '+0m',
            minViewMode: "months",
            orientation: "bottom"
        });
        $('.date-own').datepicker({
            minViewMode: 2,
            format: 'yyyy',
            startView: 2,
            endDate: '+0y',
            orientation: "bottom"
        });
    </script>

    <style>
        #reasons_table thead th {
            background-color: #F3A94D;
            color: white;
        }

        #breakdown {
            margin-top: 20px;
            height: 500px;
            overflow: auto;
            width: 100%;
        }

        #breakdown th div {
            position: absolute;
            margin-top: -20px;
        }
    </style>

    <script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        if (CompanyCode == "" && PlantCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer and Plant...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "")
            {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            else
                if (PlantCode == "")
                {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else
                {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
                    var myData = {
                        "Flag": "LineCode",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Line</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#linecode").html(s);
                        },
                        error: function (response) {

                        }
                    });

                    var myData = {
                        "Flag": "Subsystem",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Machine</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#machinecode").html(s);
                        },
                        error: function (response) {

                        }
                    });
                }
    });



    function Reset_custom() {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove();
    }

    function Reset_year() {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    }

    function Reset_month() {
        $('#month').val('');
        d3.select(".monthly_week svg").remove();
        d3.select(".month_daily svg").remove();
        d3.select(".month_shift svg").remove();
    }

    </script>

    <script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
    function Searchcustom_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var start = $('#start').val();
        var end = $('#end').val();

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear) {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }

         if (linecode == '' || machinecode == '' || start == '' || end == '') {
                swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
            }
         else {
             if (start>end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                    "line": linecode,
                    "machine": machinecode,
                    "FromDate": start,
                    "ToDate": end,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
            };
            var sample;
            $.ajax({
                type: "POST",
                url: URL + 'api/Availability/GetAvlcustomreport',
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        if (response.data.Table[0].Availability > 100) {
                            var avl = 100;
                        }
                        else {
                            var avl = response.data.Table[0].Availability;
                        }
                        if (response.data.Table[0].Availability_considering_losses > 100) {
                            var avlloss = 100;
                        }
                        else {
                            var avlloss = response.data.Table[0].Availability_considering_losses;
                        }
                        $('#custom_line').text(response.data.Table[0].Line_code);
                        $('#custom_subsystem').text(response.data.Table[0].Machine_code);
                        $('#custom_avl').text(avl);
                        $('#custom_losses').text(avlloss);
                        $('#custom_downtime').text(response.data.Table[0].DownTime);


                        sample = response.data.Table1;
                        d3.select("#container").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('#container');

                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Name))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(sample, function (d) { return d.DownTime; })]);

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                                    .attr("y", 0)
                                    .attr("x", -9)
                                    .attr("dy", ".35em")
                                    .attr("transform", "rotate(-45)")
                                    .style("text-anchor", "end");

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Name))
                            .attr('y', (g) => yScale(g.DownTime))
                            .attr('height', (g) => height - yScale(g.DownTime))
                            .attr('width', xScale.bandwidth())

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Name))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })
                            .on('click', function (a) {
                                var avl_myData = {};
                                if (response.data.Table1[0].Type == "Month") {
                                    var xvalue = a.Month;
                                    var date = xvalue;
                                    var dates = new Date();
                                    var year = dates.getFullYear();
                                    var totaldays = new Date(year, xvalue, 0).getDate();
                                    var firstDay = new Date(year, xvalue, -(totaldays - 1));
                                    var lastDay = new Date(year, xvalue, 0);
                                    var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                    var lday = lastDay.getFullYear() + "-" + (lastDay.getMonth() + 1) + "-" + lastDay.getDate();

                                    avl_myData = {
                                        "line": linecode,
                                        "Machine": machinecode,
                                        "Fromdate": fday,
                                        "Todate": lday,
                                        "CompanyCode": '@Session["CompanyCode"]',
                                        "PlantCode": '@Session["PlantCode"]'
                                    };
                                }
                                else {
                                    var xvalue = a.Name;
                                    var date = xvalue;
                                    var datearray = date.split("-");
                                    var newdate = datearray[2] + '-' + datearray[1] + '-' + datearray[0];
                                    avl_myData = {
                                        "line": linecode,
                                        "Machine": machinecode,
                                        "Fromdate": newdate,
                                        "Todate": newdate,
                                        "CompanyCode": '@Session["CompanyCode"]',
                                        "PlantCode": '@Session["PlantCode"]'
                                    };
                                }

                                oee_arr = [];
                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Availability/GetAvlReasons',
                                    data: avl_myData,
                                    dataType: "json",
                                    success: function (breakdownresult) {
                                        modal.style.display = "block";
                                        d3.select("#breakdown svg").remove();
                                        if (response.status != "Error") {
                                            oee_sample = oee_arr;
                                            const svg = d3.select("#breakdown").append("svg");
                                            const svgContainer = d3.select('.modal-body');

                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                        //console.log(breakdownresult);
                                    }
                                });
                                //d3.select(this)
                                //var xvalue = a.Name;
                                //var yvalue = a.OEE;

                                //console.log(xvalue);
                                //console.log(yvalue);
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.DownTime) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.DownTime}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('DownTime (in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text(response.data.Table[0].Type)
                    }
                    else {
                        sample = "";
                        $('#custom_line').text('');
                        $('#custom_subsystem').text('');
                        $('#custom_avl').text('');
                        $('#custom_losses').text('');
                        $('#custom_downtime').text('');
                        $("#container").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#container").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {

                }
            });
        }
    }

    function Searchyear_wise() {
        var linecode = $('#linecode').val();
         var machinecode = $('#machinecode').val();
        var year = $('#year').val();
        if (linecode == '' || machinecode == '' || year == '' ) {
                swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
        }
        else {
            var myData = {
                    "line": linecode,
                    "Machine": machinecode,
                    "Year": year,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
                };
            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Availability/GetAvlyearwise',
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        if (response.data.Table[0].Availability > 100) {
                            var avl = 100;
                        }
                        else {
                            var avl = response.data.Table[0].Availability;
                        }
                        if (response.data.Table[0].Availability_considering_losses > 100) {
                            var avlloss = 100;
                        }
                        else {
                            var avlloss = response.data.Table[0].Availability_considering_losses;
                        }
                            $('#yearly_line').text(response.data.Table[0].Line_code);
                            $('#yearly_subsystem').text(response.data.Table[0].Machine_code);
                            $('#yearly_avl').text(avl);
                            $('#yearly_losses').text(avlloss);
                            $('#yearly_downtime').text(response.data.Table[0].DownTime);


                        sample = response.data.Table1;
                        //const svg = d3.select('.year_report').append('svg');
                        d3.select(".year_report").append("svg");
                        const svg = d3.select('svg');

                        const svgContainer = d3.select('#container');

                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Name))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(sample, function (d) { return d.DownTime; })]);

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale));

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )

                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')

                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Name))
                            .attr('y', (g) => yScale(g.DownTime))
                            .attr('height', (g) => height - yScale(g.DownTime))
                            .attr('width', xScale.bandwidth())
                            //.on('mouseenter', function (actual, i) {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 0)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .delay(300)
                            //        .attr('opacity', 0.6)
                            //        .attr('x', (a) => xScale(a.Name) - 5)
                            //        .attr('width', xScale.bandwidth() + 10)

                            //    const y = yScale(actual.DownTime)

                            //    line = chart.append('line')
                            //        .attr('id', 'limit')
                            //        .attr('x1', 0)
                            //        .attr('y1', y)
                            //        .attr('x2', width)
                            //        .attr('y2', y)

                            //    barGroups.append('text')
                            //        .attr('class', 'divergence')
                            //        .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            //        .attr('y', (a) => yScale(a.DownTime) + 30)
                            //        .attr('fill', 'white')
                            //        .attr('text-anchor', 'middle')
                            //        .text((a, idx) => {
                            //            const divergence = (a.DownTime - actual.DownTime).toFixed(1)

                            //            let text = ''
                            //            if (divergence > 0) text += '+'
                            //            text += `${divergence}mins`

                            //            return idx !== i ? text : '';
                            //        })

                            //})
                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Name))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })

                            .on('click', function (a) {
                                var xvalue = a.Month;
                                var date = new Date();
                                var totaldays = new Date(year, xvalue, 0).getDate();
                                var firstDay = new Date(year, xvalue, -(totaldays - 1));
                                var lastDay = new Date(year, xvalue, 0);
                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                var lday = lastDay.getFullYear() + "-" + (lastDay.getMonth() + 1) + "-" + lastDay.getDate();

                                var avl_myData = {
                                    "line": "VFOE",
                                    "Machine": machinecode,
                                    "Fromdate": fday,
                                    "Todate": lday,
                                    "CompanyCode": '@Session["CompanyCode"]',
                                    "PlantCode": '@Session["PlantCode"]'
                                };

                                oee_arr = [];
                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Availability/GetAvlReasons',
                                    data: avl_myData,
                                    dataType: "json",
                                    success: function (breakdownresult) {
                                        modal.style.display = "block";
                                        //$('#breakdown').modal('show');
                                        if (response.status != "Error") {
                                            $(".mtable").html('');
                                            var j = 1;
                                            var cols = '';
                                            var sc = '';
                                            for (var i = 0; i < breakdownresult.data.length; i++) {
                                                cols += "<tr>";
                                                cols += "<td>" + breakdownresult.data[i].line + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Machine + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Date + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].StartTime + "</td>";
                                                cols += "<td>" +breakdownresult.data[i].EndTime + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Duration + "</td>";
                                                cols += "<td>" +breakdownresult.data[i].DowntimeReason + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Alarms+ "</td>";
                                                cols += "</tr>";
                                                j++;
                                            }
                                            $(".mtable").html(cols);
                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                    }
                                });
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.DownTime) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.DownTime}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('DownTime (in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text('Month')
                    }
                    else {
                        sample = "";
                        $('#yearly_line').text('');
                        $('#yearly_ok').text('');
                        $('#yearly_notok').text('');
                        $('#yearly_rework').text('');
                        $('#yearly_copq').text('');
                        $('#yearly_quality').text('');
                        $('#yearly_variant').text('');
                        $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (result) {
                    //console.log(result);
                }
            });
        }
    }

    function Searchmonth_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var month = $('#month').val();

        if (linecode == '' || machinecode == '' || year == '' ) {
                swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
        }
        else {
            var chartData = [];
            var myData = {
                    "line": linecode,
                    "Machine": machinecode,
                    "Month": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
                };
            var myData_daily = {
                    "line": linecode,
                    "Machine": machinecode,
                    "Month": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
            };
            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Availability/GetAvlweekwise',
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select(".monthly_week svg").remove();
                    if (response.status != "Error") {
                            //$('#monthly_line').text(response.data.Table[0].Line_code);
                            //$('#monthly_subsystem').text(response.data.Table[0].Machine_code);
                            //$('#monthly_avl').text(response.data.Table[0].Availability);
                            //$('#monthly_losses').text(response.data.Table[0].Availability_considering_losses);
                            //$('#monthly_downtime').text(response.data.Table[0].DownTime);

                        sample = response.data.Table1;
                        //const svg = d3.select('.monthly_week').append('svg');
                        const svg = d3.select(".monthly_week").append("svg");
                        const svgContainer = d3.select('#container');

                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Weekname))
                            .padding(0.4)

                        //const yScale = d3.scaleLinear()
                        //            .range([height, 0])
                        //            .domain([0,  d3.max(sample, function (d) { return d.Downtime; })])
                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0,20000])
                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale));

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )

                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')

                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Weekname))
                            .attr('y', (g) => yScale(g.Downtime))
                            .attr('height', (g) => height - yScale(g.Downtime))
                            .attr('width', xScale.bandwidth())
                            //.on('mouseenter', function (actual, i) {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 0)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .delay(300)
                            //        .attr('opacity', 0.6)
                            //        .attr('x', (a) => xScale(a.Weekname) - 5)
                            //        .attr('width', xScale.bandwidth() + 10)

                            //    const y = yScale(actual.Downtime)

                            //    line = chart.append('line')
                            //        .attr('id', 'limit')
                            //        .attr('x1', 0)
                            //        .attr('y1', y)
                            //        .attr('x2', width)
                            //        .attr('y2', y)

                            //    barGroups.append('text')
                            //        .attr('class', 'divergence')
                            //        .attr('x', (a) => xScale(a.Weekname) + xScale.bandwidth() / 2)
                            //        .attr('y', (a) => yScale(a.Downtime) + 30)
                            //        .attr('fill', 'white')
                            //        .attr('text-anchor', 'middle')
                            //        .text((a, idx) => {
                            //            const divergence = (a.Downtime - actual.Downtime).toFixed(1)

                            //            let text = ''
                            //            if (divergence > 0) text += '+'
                            //            text += `${divergence}mins`

                            //            return idx !== i ? text : '';
                            //        })

                            //})
                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Weekname))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })
                          .on('click', function (a) {
                                var xvalue = a.Week;
                                var datearray = month.split("-");
                                var totaldays = new Date(datearray[0], datearray[1], 0).getDate();
                                var firstDay = new Date(datearray[0], datearray[1], -(totaldays - 1));
                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                var avl_myData = {
                                    "line": linecode,
                                    "Machine": machinecode,
                                    "Date": fday,
                                    "WeekNo": xvalue,
                                    "CompanyCode": '@Session["CompanyCode"]',
                                    "PlantCode": '@Session["PlantCode"]'
                                };

                                oee_arr = [];
                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Availability/GetAvlWeekReasons',
                                    data: avl_myData,
                                    dataType: "json",
                                    success: function (breakdownresult) {
                                        modal.style.display = "block";
                                        d3.select("#breakdown svg").remove();
                                        if (response.status != "Error") {
                                            $(".mtable").html('');
                                            var j = 1;
                                            var cols = '';
                                            var sc = '';
                                            for (var i = 0; i < breakdownresult.data.length; i++) {
                                                cols += "<tr>";
                                                cols += "<td>" + breakdownresult.data[i].line + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Machine + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Date + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].StartTime + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].EndTime + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Duration + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].DowntimeReason + "</td>";
                                                cols += "<td>" + breakdownresult.data[i].Alarms + "</td>";
                                                cols += "</tr>";
                                                j++;
                                            }
                                            $(".mtable").html(cols);
                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                    }
                                });
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Weekname) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.Downtime) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.Downtime}`)


                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('DownTime (in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text('Week')
                    }
                    else {
                            sample = "";
                            $('#monthly_line').text('');
                            $('#monthly_subsystem').text('');
                            $('#monthly_avl').text('');
                            $('#monthly_losses').text('');
                            $('#monthly_downtime').text('');
                            $(".monthly_week").empty();

                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select(".monthly_week").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                    }

                    //Daily Details
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: URL + 'api/Availability/GetAvlDaywise',
                        data: myData_daily,
                        success: function (response) {
                            d3.select(".month_daily svg").remove();
                            if (response.status != "Error") {
                                if (response.data.Table[0].Availability > 100) {
                                    var avl = 100;
                                }
                                else {
                                    var avl = response.data.Table[0].Availability;
                                }
                                if (response.data.Table[0].Availability_considering_losses > 100) {
                                    var avlloss = 100;
                                }
                                else {
                                    var avlloss = response.data.Table[0].Availability_considering_losses;
                                }
                                $('#monthly_line').text(response.data.Table[0].Line_code);
                                $('#monthly_subsystem').text(response.data.Table[0].Machine_code);
                                $('#monthly_avl').text(avl);
                                $('#monthly_losses').text(avlloss);
                                $('#monthly_downtime').text(response.data.Table[0].DownTime);


                                sample = response.data.Table1;
                                //  const svg = d3.select('.month_daily').append('svg');

                                const svg = d3.select(".month_daily").append("svg");
                                const svgContainer = d3.select('#container');

                                const margin = 80;
                                const width = 1000 - 2 * margin;
                                const height = 600 - 2 * margin;

                                const chart = svg.append('g')
                                    .attr('transform', `translate(${margin}, ${margin})`);

                                const xScale = d3.scaleBand()
                                    .range([0, width])
                                    .domain(sample.map((s) => s.date))
                                    .padding(0.4)

                                const yScale = d3.scaleLinear()
                                    .range([height, 0])
                                    .domain([0,  d3.max(sample, function (d) { return d.DownTime; })])
                                const makeYLines = () => d3.axisLeft()
                                    .scale(yScale)

                                chart.append('g')
                                    .attr('transform', `translate(0, ${height})`)
                                    .call(d3.axisBottom(xScale))
                                    .selectAll("text")
                                    .attr("y", 0)
                                    .attr("x", -9)
                                    .attr("dy", ".35em")
                                    .attr("transform", "rotate(-45)")
                                    .style("text-anchor", "end");

                                chart.append('g')
                                    .call(d3.axisLeft(yScale));

                                chart.append('g')
                                    .attr('class', 'grid')
                                    .call(makeYLines()
                                        .tickSize(-width, 0, 0)
                                        .tickFormat('')
                                    )

                                const barGroups = chart.selectAll()
                                    .data(sample)
                                    .enter()
                                    .append('g')

                                barGroups
                                    .append('rect')
                                    .attr('class', 'bar')
                                    .attr('x', (g) => xScale(g.date))
                                    .attr('y', (g) => yScale(g.DownTime))
                                    .attr('height', (g) => height - yScale(g.DownTime))
                                    .attr('width', xScale.bandwidth())
                                    //.on('mouseenter', function (actual, i) {
                                    //    d3.selectAll('.value')
                                    //        .attr('opacity', 0)

                                    //    d3.select(this)
                                    //        .transition()
                                    //        .duration(300)
                                    //        .delay(300)
                                    //        .attr('opacity', 0.6)
                                    //        .attr('x', (a) => xScale(a.date) - 5)
                                    //        .attr('width', xScale.bandwidth() + 10)

                                    //    const y = yScale(actual.DownTime)

                                    //    line = chart.append('line')
                                    //        .attr('id', 'limit')
                                    //        .attr('x1', 0)
                                    //        .attr('y1', y)
                                    //        .attr('x2', width)
                                    //        .attr('y2', y)

                                    //    barGroups.append('text')
                                    //        .attr('class', 'divergence')
                                    //        .attr('x', (a) => xScale(a.date) + xScale.bandwidth() / 2)
                                    //        .attr('y', (a) => yScale(a.DownTime) + 30)
                                    //        .attr('fill', 'white')
                                    //        .attr('text-anchor', 'middle')
                                    //        .text((a, idx) => {
                                    //            const divergence = (a.DownTime - actual.DownTime).toFixed(1)

                                    //            let text = ''
                                    //            if (divergence > 0) text += '+'
                                    //            text += `${divergence}mins`

                                    //            return idx !== i ? text : '';
                                    //        })

                                    //})
                                    .on('mouseleave', function () {
                                        d3.selectAll('.value')
                                            .attr('opacity', 1)

                                        d3.select(this)
                                            .transition()
                                            .duration(300)
                                            .attr('opacity', 1)
                                            .attr('x', (a) => xScale(a.date))
                                            .attr('width', xScale.bandwidth())

                                        chart.selectAll('#limit').remove()
                                        chart.selectAll('.divergence').remove()
                                    })
                                    .on('click', function (a) {
                                        var xvalue = a.date;
                                        var datearray = xvalue.split("-");

                                        var newdate = datearray[2] + '-' + datearray[1] + '-' + datearray[0];

                                        var avl_myData = {
                                            "line": linecode,
                                            "Machine": machinecode,
                                            "Fromdate": newdate,
                                            "Todate": newdate,
                                            "CompanyCode": '@Session["CompanyCode"]',
                                            "PlantCode": '@Session["PlantCode"]'
                                        };

                                        oee_arr = [];
                                        $.ajax({
                                            type: "POST",
                                            url: URL + 'api/Availability/GetAvlReasons',
                                            data: avl_myData,
                                            dataType: "json",
                                            success: function (breakdownresult) {
                                                modal.style.display = "block";
                                                d3.select("#breakdown svg").remove();
                                                if (response.status != "Error") {
                                                    $(".mtable").html('');
                                                    var j = 1;
                                                    var cols = '';
                                                    var sc = '';
                                                    for (var i = 0; i < breakdownresult.data.length; i++) {
                                                        cols += "<tr>";
                                                        cols += "<td>" + breakdownresult.data[i].line + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].Machine + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].Date + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].StartTime + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].EndTime + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].Duration + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].DowntimeReason + "</td>";
                                                        cols += "<td>" + breakdownresult.data[i].Alarms + "</td>";
                                                        cols += "</tr>";
                                                        j++;
                                                    }
                                                    $(".mtable").html(cols);
                                                }
                                                else {
                                                    oee_sample = "";
                                                }

                                            },
                                            error: function (breakdownresult) {
                                            }
                                        });
                                    })
                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.date) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.DownTime) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.DownTime}`)

                                svg.append('text')
                                    .attr('class', 'label')
                                    .attr('x', -(height / 2) - margin)
                                    .attr('y', margin / 2.4)
                                    .attr('transform', 'rotate(-90)')
                                    .attr('text-anchor', 'middle')
                                    .text('DownTime (in minutes)')

                                svg.append('text')
                                    .attr('class', 'label')
                                    .attr('x', width / 2 + margin)
                                    .attr('y', 600)
                                    .attr('text-anchor', 'middle')
                                    .text('Date')
                            }
                            else {
                                sample = "";
                                $('#monthly_line').text('');
                                $('#monthly_subsystem').text('');
                                $('#monthly_avl').text('');
                                $('#monthly_losses').text('');
                                $('#monthly_downtime').text('');
                                $(".month_daily").empty();

                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select(".month_daily").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                        .style("font-size", "40px");

                            }

                            //Shift Wise Details

                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                url: URL + 'api/Availability/GetAvlshiftwise',
                                data: myData,
                                success: function (response) {
                                    d3.select(".month_shift svg").remove();
                                    if (response.status != "Error") {
                                        //$('#monthly_line').text(response.data.Table[0].Line_code);
                                        //$('#monthly_subsystem').text(response.data.Table[0].Machine_code);
                                        //$('#monthly_avl').text(response.data.Table[0].Availability);
                                        //$('#monthly_losses').text(response.data.Table[0].Availability_considering_losses);
                                        //$('#monthly_downtime').text(response.data.Table[0].DownTime);

                                        sample = response.data.Table1;
                                        // const svg = d3.select('.month_shift').append('svg');
                                        const svg = d3.select(".month_shift").append("svg");
                                        const svgContainer = d3.select('#container');

                                        const margin = 80;
                                        const width = 1000 - 2 * margin;
                                        const height = 600 - 2 * margin;

                                        const chart = svg.append('g')
                                            .attr('transform', `translate(${margin}, ${margin})`);

                                        const xScale = d3.scaleBand()
                                            .range([0, width])
                                            .domain(sample.map((s) => s.Shift_id))
                                            .padding(0.4)

                                        const yScale = d3.scaleLinear()
                                            .range([height, 0])
                                            .domain([0, d3.max(sample, function (d) { return d.DownTime; })]);

                                        const makeYLines = () => d3.axisLeft()
                                            .scale(yScale)

                                        chart.append('g')
                                            .attr('transform', `translate(0, ${height})`)
                                            .call(d3.axisBottom(xScale));

                                        chart.append('g')
                                            .call(d3.axisLeft(yScale));

                                        chart.append('g')
                                            .attr('class', 'grid')
                                            .call(makeYLines()
                                                .tickSize(-width, 0, 0)
                                                .tickFormat('')
                                            )

                                        const barGroups = chart.selectAll()
                                            .data(sample)
                                            .enter()
                                            .append('g')

                                        barGroups
                                            .append('rect')
                                            .attr('class', 'bar')
                                            .attr('x', (g) => xScale(g.Shift_id))
                                            .attr('y', (g) => yScale(g.DownTime))
                                            .attr('height', (g) => height - yScale(g.DownTime))
                                            .attr('width', xScale.bandwidth())
                                            //.on('mouseenter', function (actual, i) {
                                            //    d3.selectAll('.value')
                                            //        .attr('opacity', 0)

                                            //    d3.select(this)
                                            //        .transition()
                                            //        .duration(300)
                                            //        .delay(300)
                                            //        .attr('opacity', 0.6)
                                            //        .attr('x', (a) => xScale(a.Shift_id) - 5)
                                            //        .attr('width', xScale.bandwidth() + 10)

                                            //    const y = yScale(actual.DownTime)

                                            //    line = chart.append('line')
                                            //        .attr('id', 'limit')
                                            //        .attr('x1', 0)
                                            //        .attr('y1', y)
                                            //        .attr('x2', width)
                                            //        .attr('y2', y)

                                            //    barGroups.append('text')
                                            //        .attr('class', 'divergence')
                                            //        .attr('x', (a) => xScale(a.Shift_id) + xScale.bandwidth() / 2)
                                            //        .attr('y', (a) => yScale(a.DownTime) + 30)
                                            //        .attr('fill', 'white')
                                            //        .attr('text-anchor', 'middle')
                                            //        .text((a, idx) => {
                                            //            const divergence = (a.DownTime - actual.DownTime).toFixed(1)

                                            //            let text = ''
                                            //            if (divergence > 0) text += '+'
                                            //            text += `${divergence}mins`

                                            //            return idx !== i ? text : '';
                                            //        })

                                            //})
                                            .on('mouseleave', function () {
                                                d3.selectAll('.value')
                                                    .attr('opacity', 1)

                                                d3.select(this)
                                                    .transition()
                                                    .duration(300)
                                                    .attr('opacity', 1)
                                                    .attr('x', (a) => xScale(a.Shift_id))
                                                    .attr('width', xScale.bandwidth())

                                                chart.selectAll('#limit').remove()
                                                chart.selectAll('.divergence').remove()
                                            })
                                            .on('click', function (a) {
                                                var xvalue = a.Shift_id;


                                                var datearray = month.split("-");
                                                var totaldays = new Date(datearray[0], datearray[1], 0).getDate();
                                                var firstDay = new Date(datearray[0], datearray[1], -(totaldays - 1));
                                                //var lastDay = new Date(year, xvalue, 0);
                                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                                //var lday = lastDay.getFullYear() + "-" + (lastDay.getMonth() + 1) + "-" + lastDay.getDate();

                                                var avl_myData = {
                                                    "line": linecode,
                                                    "Machine": machinecode,
                                                    "Fromdate": fday,
                                                    //"Todate": lday,
                                                    "shift": xvalue,
                                                    "CompanyCode": '@Session["CompanyCode"]',
                                                    "PlantCode": '@Session["PlantCode"]'
                                                };

                                                oee_arr = [];
                                                $.ajax({
                                                    type: "POST",
                                                    url: URL + 'api/Availability/GetAvlShiftReasons',
                                                    data: avl_myData,
                                                    dataType: "json",
                                                    success: function (breakdownresult) {
                                                        modal.style.display = "block";
                                                        if (response.status != "Error") {
                                                            $(".mtable").html('');
                                                            var j = 1;
                                                            var cols = '';
                                                            var sc = '';
                                                            for (var i = 0; i < breakdownresult.data.length; i++) {
                                                                cols += "<tr>";
                                                                cols += "<td>" + breakdownresult.data[i].line + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].Machine + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].Date + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].StartTime + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].EndTime + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].Duration + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].DowntimeReason + "</td>";
                                                                cols += "<td>" + breakdownresult.data[i].Alarms + "</td>";
                                                                cols += "</tr>";
                                                                j++;
                                                            }
                                                            $(".mtable").html(cols);
                                                        }
                                                        else {
                                                            oee_sample = "";
                                                        }

                                                    },
                                                    error: function (breakdownresult) {
                                                    }
                                                });
                                            })
                                        barGroups
                                            .append('text')
                                            .attr('class', 'value')
                                            .attr('x', (a) => xScale(a.Shift_id) + xScale.bandwidth() / 2)
                                            .attr('y', (a) => yScale(a.DownTime) + -10)
                                            .attr('text-anchor', 'middle')
                                            .text((a) => `${a.DownTime}`)

                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', -(height / 2) - margin)
                                            .attr('y', margin / 2.4)
                                            .attr('transform', 'rotate(-90)')
                                            .attr('text-anchor', 'middle')
                                            .text('DownTime (in minutes)')

                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', width / 2 + margin)
                                            .attr('y', height + margin * 1.7)
                                            .attr('text-anchor', 'middle')
                                            .text('Shift Id')
                                    }
                                    else {
                                        sample = "";
                                        $('#monthly_line').text('');
                                        $('#monthly_subsystem').text('');
                                        $('#monthly_avl').text('');
                                        $('#monthly_losses').text('');
                                        $('#monthly_downtime').text('');

                                        $(".month_shift").empty();

                                        var div_width = 400;
                                        var div_height = 400;
                                        var svg = d3.select(".month_shift").append("svg")
                                            .attr("width", div_width)
                                            .attr("height", div_height)
                                            .attr("preserveAspectRatio", "xMidYMid")
                                            .append("g")
                                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                        svg.append("text")
                                            .text("No Data Available")
                                            .style("font-size", "40px");
                                    }
                                },
                                error: function (result) {
                                    //console.log(result);
                                }
                            });
                        },
                        error: function (result) {
                            //console.log(result);
                        }
                    });
                },
                error: function (result) {
                    //console.log(result);
                }
            });
        }
    }
    </script>

    <script type="text/javascript">
        var modal = document.getElementById("myModal");
        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];
        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }
    </script>

