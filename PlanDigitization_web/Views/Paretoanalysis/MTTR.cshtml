
@{
    ViewBag.Title = "MTTR";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.css">
<link href="~/Content/bootstrapmodel.css" rel="stylesheet" />
<header class="page-header">
    <h2>Mean Time to Repair</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("Dashboard","Main")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            <li><span>Historic Data & Analytics</span></li>
            <li><span>Alarm Analysis</span></li>
            <li><span>MTTR</span></li>
        </ol>
    </div>
</header>
@if (ViewContext.Controller.HasPermission("ParetoAnalysisHistoric-View"))
{
    <div class="row">
        <div class="col-md-8">
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
            </div>
            <div class="btn-group">
                <select id="linecode" class="form-control" name="linecode" title="*"></select>
            </div>&nbsp;&nbsp;
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Machine </label>
            </div>
            <div class="btn-group">
                <select id="machinecode" class="form-control" name="machinecode" title="*"></select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="custom" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-2 control-label">Date range</label>
                                <div class="col-md-6">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchcustom_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_custom()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="custom_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="custom_subsystem"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container' style="height:1000px">
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe">Select Year</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchyear_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_year()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yearly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="yearly_subsystem"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report" style="height:1000px;">
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label">Select Month</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-primary" onclick="Searchmonth_wise()">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-danger" onclick="Reset_month()">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="monthly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="monthly_subsystem"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="monthly_report" style="height:1000px;">
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}
<!-- end: page -->
<script src="~/assets/javascripts/swal.js"></script>
<script src="~/assets/javascripts/swal_alert.js"></script>
<script src="~/assets/datepicker_normal/jquery-1.7.2.min.js"></script>
<script src="~/assets/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        endDate: '+0y',
        startView: 2,
        orientation: "bottom"
    });
</script>
<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        if (CompanyCode == "" && PlantCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer and Plant...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "") {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            else
                if (PlantCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
                    var myData = {
                        "Flag": "LineCode",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Line</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#linecode").html(s);
                        },
                        error: function (response) {

                        }
                    });

                    var myData = {
                        "Flag": "Subsystem",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Toollife/GetSettingdatas',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Machine</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#machinecode").html(s);
                        },
                        error: function (response) {

                        }
                    });
                }

    });

    function Reset_custom() {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove();
    }

    function Reset_year() {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    }

    function Reset_month() {
        $('#month').val('');
        d3.select(".monthly_report svg").remove();
    }

</script>

<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

    function Searchcustom_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var start = $('#start').val();
        var end = $('#end').val();
        var year = $('#year').val();
        var month = $('#month').val();

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (start == '') {
                swal({
                    icon: "error",
                    title: "Please Provide start date",
                    button: false,
                    timer: 4500
                })
        }
        else if (end == '') {
                swal({
                    icon: "error",
                    title: "Please Provide End date",
                    button: false,
                    timer: 4500
                })
        }
        else {
            if (start>end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            var sample;
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_CustomReport',
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        $('#custom_line').text(linecode);
                        $('#custom_subsystem').text(machinecode);
                        sample = response.data.Table;
                        d3.select("#container").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('#container');
                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-65)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups.append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + 30)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.MTTR) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Time(in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $("#container").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#container").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {

                }
            });
        }
    }

    function Searchyear_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var year = $('#year').val();


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (year == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Year",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "Year": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_YearwiseReport',
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    $('#yearly_line').text(linecode);
                    $('#yearly_subsystem').text(machinecode);
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        sample = response.data.Table;
                        d3.select(".year_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.year_report');
                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-65)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        //barGroups
                        //    .append('text')
                        //    .attr('class', 'value')
                        //    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                        //    .attr('y', (a) => yScale(a.MTTR) + 30)
                        //    .attr('text-anchor', 'middle')
                        //    .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Time(in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                         $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {

                }
            });
        }
    }

    function Searchmonth_wise() {
        var linecode = $('#linecode').val();
        var machinecode = $('#machinecode').val();
        var month = $('#month').val();


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (month == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Month",
                    button: false,
                    timer: 4500
                })
        }
        else
        {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "Year": month,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_MonthwiseReport',
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    $('#monthly_line').text(linecode);
                    $('#monthly_subsystem').text(machinecode);
                    if (response.status != "Error") {
                        sample = response.data.Table;
                        d3.select(".monthly_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.monthly_report');
                        const margin = 80;
                        const width = 1000 - 2 * margin;
                        const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-65)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        //barGroups
                        //    .append('text')
                        //    .attr('class', 'value')
                        //    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                        //    .attr('y', (a) => yScale(a.MTTR) + 30)
                        //    .attr('text-anchor', 'middle')
                        //    .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Time(in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $(".monthly_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".monthly_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {

                }
            });
        }
    }

</script>

